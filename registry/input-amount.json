{
  "name": "input-amount",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "input",
    "label"
  ],
  "files": [
    {
      "type": "registry:ui",
      "path": "ui/input-amount.tsx",
      "content": "'use client'\n\nimport type React from 'react'\nimport { useState, useEffect } from 'react'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { cn } from '@/lib/utils'\n\ninterface InputAmountProps extends Omit<React.ComponentProps<'input'>, 'value' | 'onChange'> {\n  value?: number | null\n  onChange?: (value: number | null) => void\n  placeholder?: string\n  disabled?: boolean\n  label?: string\n  error?: string\n  className?: string\n  maxDecimals?: number\n  showCurrency?: boolean\n  currency?: string\n  locale?: string\n}\n\nexport function InputAmount({\n  value,\n  onChange,\n  placeholder = '0.00',\n  disabled = false,\n  label,\n  error,\n  className,\n  maxDecimals = 2,\n  showCurrency = false,\n  currency = '$',\n  locale = 'en-US',\n  ...props\n}: InputAmountProps) {\n  const [displayValue, setDisplayValue] = useState<string>('')\n  const [focused, setFocused] = useState(false)\n\n  useEffect(() => {\n    if (value !== null && value !== undefined && !focused) {\n      const formatted = new Intl.NumberFormat(locale, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: maxDecimals,\n      }).format(value)\n      setDisplayValue(formatted)\n    } else if (value === null || value === undefined) {\n      setDisplayValue('')\n    }\n  }, [value, locale, maxDecimals, focused])\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value\n    setDisplayValue(inputValue)\n\n    const numericValue = inputValue.replace(/[^0-9.-]/g, '')\n    const parsed = parseFloat(numericValue)\n\n    if (isNaN(parsed)) {\n      onChange?.(null)\n    } else {\n      const rounded = Math.round(parsed * Math.pow(10, maxDecimals)) / Math.pow(10, maxDecimals)\n      onChange?.(rounded)\n    }\n  }\n\n  const handleFocus = () => {\n    setFocused(true)\n    if (value !== null && value !== undefined) {\n      setDisplayValue(value.toString())\n    }\n  }\n\n  const handleBlur = () => {\n    setFocused(false)\n    if (value !== null && value !== undefined) {\n      const formatted = new Intl.NumberFormat(locale, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: maxDecimals,\n      }).format(value)\n      setDisplayValue(formatted)\n    }\n  }\n\n  return (\n    <div className={cn('space-y-2', className)}>\n      {label && (\n        <Label htmlFor={props.id}>\n          {label}\n        </Label>\n      )}\n      <div className=\"relative\">\n        {showCurrency && (\n          <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n            {currency}\n          </div>\n        )}\n        <Input\n          {...props}\n          type=\"text\"\n          inputMode=\"decimal\"\n          value={displayValue}\n          onChange={handleInputChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            showCurrency && 'pl-8',\n            error && 'border-destructive focus-visible:ring-destructive'\n          )}\n        />\n      </div>\n      {error && (\n        <p className=\"text-sm text-destructive\">{error}</p>\n      )}\n    </div>\n  )\n}"
    }
  ]
}