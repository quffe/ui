{
  "name": "modal",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:ui",
      "path": "ui/modal.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { X } from 'lucide-react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { createPortal } from 'react-dom'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\n/**\n * Modal overlay variants for different positioning\n */\nconst modalVariants = cva(\n  'fixed inset-0 z-50 flex items-center justify-center p-4 sm:p-6',\n  {\n    variants: {\n      position: {\n        center: 'items-center justify-center',\n        top: 'items-start justify-center pt-[10vh]',\n        bottom: 'items-end justify-center pb-[10vh]',\n      },\n    },\n    defaultVariants: {\n      position: 'center',\n    },\n  }\n)\n\n/**\n * Modal content variants for different sizes\n */\nconst contentVariants = cva(\n  'bg-background relative rounded-lg shadow-lg border max-h-[90vh] overflow-auto animate-in fade-in-0 zoom-in-95 duration-200',\n  {\n    variants: {\n      size: {\n        sm: 'w-full max-w-sm',\n        md: 'w-full max-w-md',\n        lg: 'w-full max-w-lg',\n        xl: 'w-full max-w-xl',\n        '2xl': 'w-full max-w-2xl',\n        '3xl': 'w-full max-w-3xl',\n        '4xl': 'w-full max-w-4xl',\n        full: 'w-full max-w-[95vw]',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  }\n)\n\nexport interface ModalProps\n  extends VariantProps<typeof modalVariants>,\n    VariantProps<typeof contentVariants> {\n  children: React.ReactNode\n  open: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  showCloseButton?: boolean\n  closeOnOutsideClick?: boolean\n  closeOnEsc?: boolean\n  className?: string\n  contentClassName?: string\n}\n\nexport function Modal({\n  children,\n  open,\n  onClose,\n  title,\n  description,\n  position,\n  size,\n  showCloseButton = true,\n  closeOnOutsideClick = true,\n  closeOnEsc = true,\n  className,\n  contentClassName,\n}: ModalProps) {\n  const modalRef = React.useRef<HTMLDivElement>(null)\n  const [isClosing, setIsClosing] = React.useState(false)\n  const [mounted, setMounted] = React.useState(false)\n\n  // Handle component mount for client-side rendering\n  React.useEffect(() => {\n    setMounted(true)\n    return () => setMounted(false)\n  }, [])\n\n  // Handle close with animation\n  const handleClose = React.useCallback(() => {\n    setIsClosing(true)\n    setTimeout(() => {\n      setIsClosing(false)\n      onClose()\n    }, 100)\n  }, [onClose])\n\n  // Handle ESC key press\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && closeOnEsc) {\n        handleClose()\n      }\n    }\n\n    if (open) {\n      document.addEventListener('keydown', handleKeyDown)\n      // Prevent scrolling on the body when modal is open\n      document.body.style.overflow = 'hidden'\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n      document.body.style.overflow = ''\n    }\n  }, [open, closeOnEsc, handleClose])\n\n  // Handle outside click\n  const handleOutsideClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (\n      closeOnOutsideClick &&\n      modalRef.current &&\n      !modalRef.current.contains(e.target as Node)\n    ) {\n      handleClose()\n    }\n  }\n\n  if ((!open && !isClosing) || !mounted) return null\n\n  const modalContent = (\n    <div\n      className={cn(\n        modalVariants({ position }),\n        'bg-background/80 backdrop-blur-sm',\n        isClosing && 'animate-out fade-out-0 zoom-out-95 duration-200',\n        className\n      )}\n      onClick={handleOutsideClick}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby={title ? 'modal-title' : undefined}\n      aria-describedby={description ? 'modal-description' : undefined}\n    >\n      <div\n        ref={modalRef}\n        className={cn(\n          contentVariants({ size }),\n          isClosing && 'animate-out fade-out-0 zoom-out-95 duration-200',\n          contentClassName\n        )}\n      >\n        {showCloseButton && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-2 top-2 z-10\"\n            onClick={handleClose}\n            aria-label=\"Close modal\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n        {(title || description) && (\n          <div className=\"p-6 pb-0\">\n            {title && (\n              <h2\n                id=\"modal-title\"\n                className=\"text-lg font-semibold leading-none tracking-tight\"\n              >\n                {title}\n              </h2>\n            )}\n            {description && (\n              <p\n                id=\"modal-description\"\n                className=\"mt-2 text-sm text-muted-foreground\"\n              >\n                {description}\n              </p>\n            )}\n          </div>\n        )}\n        <div className=\"p-6\">{children}</div>\n      </div>\n    </div>\n  )\n\n  return createPortal(modalContent, document.body)\n}"
    }
  ]
}