{
  "name": "use-mobile",
  "type": "registry:hook",
  "description": "Hook to detect mobile viewport and breakpoints",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/use-mobile.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/** Default mobile breakpoint in pixels */\nconst DEFAULT_MOBILE_BREAKPOINT = 768\n\n/**\n * Options for configuring the mobile detection hook\n */\nexport interface UseMobileOptions {\n  /** Custom breakpoint in pixels (default: 768) */\n  breakpoint?: number\n  /** Initial value before hydration (default: false) */\n  defaultValue?: boolean\n  /** Whether to use SSR-safe mode (default: true) */\n  ssrSafe?: boolean\n}\n\n/**\n * A hook that detects whether the current viewport is mobile-sized\n *\n * Features:\n * - Responsive breakpoint detection\n * - SSR-safe with proper hydration\n * - Customizable breakpoint\n * - Automatic cleanup\n * - Performance optimized with matchMedia API\n *\n * @param options - Configuration options\n * @returns boolean indicating if the viewport is mobile-sized\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const isMobile = useMobile()\n *   const isTablet = useMobile({ breakpoint: 1024 })\n *\n *   return (\n *     <div>\n *       {isMobile ? 'Mobile Layout' : 'Desktop Layout'}\n *     </div>\n *   )\n * }\n * ```\n */\nexport function useMobile({\n  breakpoint = DEFAULT_MOBILE_BREAKPOINT,\n  defaultValue = false,\n  ssrSafe = true,\n}: UseMobileOptions = {}): boolean {\n  const [isMobile, setIsMobile] = React.useState<boolean>(\n    ssrSafe\n      ? defaultValue\n      : () => {\n          if (typeof window === \"undefined\") return defaultValue\n          return window.innerWidth < breakpoint\n        }\n  )\n\n  const [isHydrated, setIsHydrated] = React.useState(!ssrSafe)\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return\n\n    // Handle hydration mismatch\n    if (ssrSafe && !isHydrated) {\n      setIsMobile(window.innerWidth < breakpoint)\n      setIsHydrated(true)\n      return\n    }\n\n    const mediaQuery = window.matchMedia(`(max-width: ${breakpoint - 1}px)`)\n\n    const handleChange = (event: MediaQueryListEvent) => {\n      setIsMobile(event.matches)\n    }\n\n    // Set initial value\n    setIsMobile(mediaQuery.matches)\n\n    // Add listener\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener(\"change\", handleChange)\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange)\n    }\n\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener(\"change\", handleChange)\n      } else {\n        // Fallback for older browsers\n        mediaQuery.removeListener(handleChange)\n      }\n    }\n  }, [breakpoint, ssrSafe, isHydrated])\n\n  return isMobile\n}\n\n/**\n * Legacy export for backward compatibility\n * @deprecated Use `useMobile` instead\n */\nexport const useIsMobile = () => useMobile()\n"
    }
  ]
}