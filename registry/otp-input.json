{
  "name": "otp-input",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:ui",
      "path": "ui/otp-input.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface OtpInputProps {\n  length?: number\n  value: string\n  onChange: (value: string) => void\n  onComplete?: (value: string) => void\n  size?: 'sm' | 'md' | 'lg'\n  mask?: boolean\n  error?: boolean\n  disabled?: boolean\n  autoSubmit?: boolean\n  className?: string\n}\n\nexport function OtpInput({\n  length = 6,\n  value,\n  onChange,\n  onComplete,\n  size = 'md',\n  mask = false,\n  error = false,\n  disabled = false,\n  autoSubmit = false,\n  className,\n}: OtpInputProps) {\n  const inputRefs = React.useRef<(HTMLInputElement | null)[]>([])\n  const [values, setValues] = React.useState<string[]>(Array(length).fill(''))\n\n  React.useEffect(() => {\n    const newValues = value.split('').slice(0, length)\n    while (newValues.length < length) {\n      newValues.push('')\n    }\n    setValues(newValues)\n  }, [value, length])\n\n  const handleChange = (index: number, inputValue: string) => {\n    if (disabled) return\n\n    const newValue = inputValue.slice(-1)\n    const newValues = [...values]\n    newValues[index] = newValue\n    setValues(newValues)\n\n    const newOtpValue = newValues.join('')\n    onChange(newOtpValue)\n\n    if (newValue && index < length - 1) {\n      inputRefs.current[index + 1]?.focus()\n    }\n\n    if (newOtpValue.length === length) {\n      onComplete?.(newOtpValue)\n      if (autoSubmit) {\n        inputRefs.current[index]?.blur()\n      }\n    }\n  }\n\n  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && !values[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus()\n    }\n    \n    if (e.key === 'ArrowLeft' && index > 0) {\n      e.preventDefault()\n      inputRefs.current[index - 1]?.focus()\n    }\n    \n    if (e.key === 'ArrowRight' && index < length - 1) {\n      e.preventDefault()\n      inputRefs.current[index + 1]?.focus()\n    }\n  }\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault()\n    const pastedData = e.clipboardData.getData('text/plain').slice(0, length)\n    const newValues = pastedData.split('').slice(0, length)\n    while (newValues.length < length) {\n      newValues.push('')\n    }\n    setValues(newValues)\n    onChange(newValues.join(''))\n    \n    const lastFilledIndex = Math.min(pastedData.length - 1, length - 1)\n    inputRefs.current[lastFilledIndex]?.focus()\n  }\n\n  const sizeClasses = {\n    sm: 'h-8 w-8 text-sm',\n    md: 'h-12 w-12 text-base',\n    lg: 'h-16 w-16 text-lg',\n  }\n\n  return (\n    <div className={cn('flex items-center gap-2', className)}>\n      {values.map((digit, index) => (\n        <input\n          key={index}\n          ref={(el) => (inputRefs.current[index] = el)}\n          type={mask ? 'password' : 'text'}\n          inputMode=\"numeric\"\n          pattern=\"[0-9]*\"\n          maxLength={1}\n          value={digit}\n          onChange={(e) => handleChange(index, e.target.value)}\n          onKeyDown={(e) => handleKeyDown(index, e)}\n          onPaste={handlePaste}\n          disabled={disabled}\n          className={cn(\n            'flex items-center justify-center text-center font-mono rounded-md border border-input bg-background ring-offset-background',\n            'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n            'disabled:cursor-not-allowed disabled:opacity-50',\n            error && 'border-destructive focus-visible:ring-destructive',\n            sizeClasses[size]\n          )}\n          aria-label={`OTP digit ${index + 1}`}\n        />\n      ))}\n    </div>\n  )\n}"
    }
  ]
}