{
  "name": "data-table",
  "type": "registry:ui",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "table"
  ],
  "files": [
    {
      "type": "registry:ui",
      "path": "ui/data-table.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  type SortingState,\n  getSortedRowModel,\n  type ColumnFiltersState,\n  getFilteredRowModel,\n  type PaginationState,\n} from '@tanstack/react-table'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { cn } from '@/lib/utils'\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react'\n\nexport type PaginationArg = { pageIndex: number; pageSize: number }\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  onRowClick?: (row: TData) => void\n  singleAction?: boolean\n  pageSize?: number\n  pageIndex?: number\n  totalCount?: number\n  onPaginationChange?: (pagination: PaginationArg) => void\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  onRowClick,\n  singleAction = false,\n  pageSize = 25,\n  pageIndex = 0,\n  totalCount = 0,\n  onPaginationChange,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [pagination, setPagination] = React.useState<PaginationState>({\n    pageIndex: pageIndex - 1,\n    pageSize,\n  })\n\n  React.useEffect(() => {\n    setPagination({ pageIndex: pageIndex - 1, pageSize })\n  }, [pageIndex, pageSize])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    manualPagination: !!onPaginationChange,\n    pageCount: onPaginationChange ? Math.ceil(totalCount / pageSize) : -1,\n    onPaginationChange: onPaginationChange\n      ? (updater: PaginationState | ((old: PaginationState) => PaginationState)) => {\n          const newPagination = typeof updater === 'function' ? updater(pagination) : updater\n          setPagination(newPagination)\n          onPaginationChange({\n            pageIndex: newPagination.pageIndex + 1,\n            pageSize: newPagination.pageSize,\n          })\n        }\n      : setPagination,\n    state: {\n      sorting,\n      columnFilters,\n      pagination,\n    },\n  })\n\n  return (\n    <div className=\"rounded-md border w-full\">\n      <div className=\"w-full overflow-x-auto\">\n        <Table className=\"min-w-full\">\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                  className={cn(\n                    singleAction && onRowClick ? 'cursor-pointer hover:bg-muted/50' : ''\n                  )}\n                  onClick={singleAction && onRowClick ? () => onRowClick(row.original) : undefined}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between space-x-2 p-4 border-t\">\n        <div className=\"text-sm text-muted-foreground\">\n          {onPaginationChange && totalCount > 0 && (\n            <>\n              Showing {pagination.pageIndex * pagination.pageSize + 1} to{' '}\n              {Math.min((pagination.pageIndex + 1) * pagination.pageSize, totalCount)} of {totalCount} results\n            </>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={onPaginationChange ? pageIndex === 1 : !table.getCanPreviousPage()}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={onPaginationChange ? pageIndex * pageSize >= totalCount : !table.getCanNextPage()}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}"
    }
  ]
}