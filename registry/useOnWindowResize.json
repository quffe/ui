{
  "name": "useOnWindowResize",
  "type": "registry:hook",
  "description": "Hook that responds to window resize events",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useOnWindowResize.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nexport const useOnWindowResize = (handler: { (): void }) => {\n  // Use useRef to store the latest handler without causing re-renders\n  const handlerRef = React.useRef(handler)\n\n  // Update the ref whenever handler changes\n  React.useEffect(() => {\n    handlerRef.current = handler\n  })\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      handlerRef.current()\n    }\n\n    // Call handler initially to get current window size\n    handleResize()\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, []) // Empty dependency array - only runs once\n}\n"
    }
  ]
}