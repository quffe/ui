{
  "name": "data-table",
  "type": "registry:component",
  "category": "Data",
  "namespace": "@quffeui/data",
  "description": "A powerful data table with sorting, filtering, and pagination",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "table"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Data/DataTable.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  type SortingState,\n  getSortedRowModel,\n  type ColumnFiltersState,\n  getFilteredRowModel,\n  type PaginationState,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport { cn } from \"@/lib/utils\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nexport type PaginationArg = { pageIndex: number; pageSize: number }\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  onRowClick?: (row: TData) => void\n  singleAction?: boolean\n  pageSize?: number\n  pageIndex?: number\n  totalCount?: number\n  onPaginationChange?: (pagination: PaginationArg) => void\n  hidePagination?: boolean\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  onRowClick,\n  singleAction = false,\n  pageSize = 25,\n  pageIndex = 1,\n  totalCount = 0,\n  onPaginationChange,\n  hidePagination = false,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [pagination, setPagination] = React.useState<PaginationState>({\n    pageIndex: Math.max(pageIndex - 1, 0),\n    pageSize,\n  })\n\n  React.useEffect(() => {\n    setPagination({ pageIndex: Math.max(pageIndex - 1, 0), pageSize })\n  }, [pageIndex, pageSize])\n\n  const renderPageNumbers = () => {\n    if (!onPaginationChange) return null\n\n    const totalPages = Math.ceil(totalCount / pageSize)\n    const currentPage = Math.min(pageIndex, totalPages || 1)\n    const pages = []\n\n    if (totalPages <= 5) {\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(\n          <Button\n            key={i}\n            variant={currentPage === i ? \"default\" : \"outline\"}\n            size=\"sm\"\n            type=\"button\"\n            onClick={() => onPaginationChange({ pageIndex: i, pageSize })}\n            disabled={currentPage === i}\n            aria-label={`Go to page ${i}`}\n            aria-current={currentPage === i ? \"page\" : undefined}\n          >\n            {i}\n          </Button>\n        )\n      }\n      return pages\n    }\n\n    pages.push(\n      <Button\n        key={1}\n        variant={currentPage === 1 ? \"default\" : \"outline\"}\n        size=\"sm\"\n        type=\"button\"\n        onClick={() => onPaginationChange({ pageIndex: 1, pageSize })}\n        disabled={currentPage === 1}\n        aria-label=\"Go to page 1\"\n        aria-current={currentPage === 1 ? \"page\" : undefined}\n      >\n        1\n      </Button>\n    )\n\n    let start = Math.max(2, currentPage - 2)\n    let end = Math.min(totalPages - 1, currentPage + 2)\n\n    if (end - start < 4) {\n      if (start === 2) {\n        end = Math.min(totalPages - 1, start + 4)\n      } else {\n        start = Math.max(2, end - 4)\n      }\n    }\n\n    if (start > 2) {\n      pages.push(\n        <span key=\"ellipsis-start\" aria-hidden className=\"flex h-8 w-8 items-center justify-center\">\n          <MoreHorizontal className=\"h-4 w-4\" />\n        </span>\n      )\n    }\n\n    for (let i = start; i <= end; i++) {\n      pages.push(\n        <Button\n          key={i}\n          variant={currentPage === i ? \"default\" : \"outline\"}\n          size=\"sm\"\n          type=\"button\"\n          onClick={() => onPaginationChange({ pageIndex: i, pageSize })}\n          disabled={currentPage === i}\n          aria-label={`Go to page ${i}`}\n          aria-current={currentPage === i ? \"page\" : undefined}\n        >\n          {i}\n        </Button>\n      )\n    }\n\n    if (end < totalPages - 1) {\n      pages.push(\n        <span key=\"ellipsis-end\" aria-hidden className=\"flex h-8 w-8 items-center justify-center\">\n          <MoreHorizontal className=\"h-4 w-4\" />\n        </span>\n      )\n    }\n\n    if (totalPages > 1) {\n      pages.push(\n        <Button\n          key={totalPages}\n          variant={currentPage === totalPages ? \"default\" : \"outline\"}\n          size=\"sm\"\n          type=\"button\"\n          onClick={() => onPaginationChange({ pageIndex: totalPages, pageSize })}\n          disabled={currentPage === totalPages}\n          aria-label={`Go to page ${totalPages}`}\n          aria-current={currentPage === totalPages ? \"page\" : undefined}\n        >\n          {totalPages}\n        </Button>\n      )\n    }\n\n    return pages\n  }\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    manualPagination: !!onPaginationChange,\n    pageCount: onPaginationChange ? Math.ceil(totalCount / pageSize) : -1,\n    onPaginationChange: onPaginationChange\n      ? (updater: PaginationState | ((old: PaginationState) => PaginationState)) => {\n          const newPagination = typeof updater === \"function\" ? updater(pagination) : updater\n          setPagination(newPagination)\n          onPaginationChange({\n            pageIndex: newPagination.pageIndex + 1,\n            pageSize: newPagination.pageSize,\n          })\n        }\n      : setPagination,\n    state: {\n      sorting,\n      columnFilters,\n      pagination,\n    },\n  })\n\n  return (\n    <div className=\"w-full rounded-md border\">\n      <Table className=\"min-w-full\">\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                return (\n                  <TableHead\n                    key={header.id}\n                    className={\n                      header.id.includes(\"actions\") ? \"sticky right-0 bg-background shadow-sm\" : \"\"\n                    }\n                  >\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map(row => {\n              const isSelectable = singleAction && onRowClick\n\n              const handleRowKeyDown = isSelectable\n                ? (event: React.KeyboardEvent<HTMLTableRowElement>) => {\n                    if (event.key === \"Enter\" || event.key === \" \") {\n                      event.preventDefault()\n                      onRowClick?.(row.original)\n                    }\n                  }\n                : undefined\n\n              return (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                  data-clickable={isSelectable ? \"true\" : undefined}\n                  className={cn(isSelectable ? \"cursor-pointer hover:bg-muted/50\" : \"\")}\n                  onClick={isSelectable ? () => onRowClick?.(row.original) : undefined}\n                  tabIndex={isSelectable ? 0 : undefined}\n                  onKeyDown={handleRowKeyDown}\n                  aria-label={isSelectable ? `Select row ${row.index + 1}` : undefined}\n                >\n                  {row.getVisibleCells().map(cell => (\n                    <TableCell\n                      key={cell.id}\n                      className={\n                        cell.column.id.includes(\"actions\")\n                          ? \"sticky right-0 bg-background shadow-sm\"\n                          : \"\"\n                      }\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              )\n            })\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      {hidePagination ? null : (\n        <div className=\"flex items-center justify-between space-x-2 border-t p-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            {onPaginationChange && totalCount > 0 && (\n              <span aria-live=\"polite\">\n                Showing {pagination.pageIndex * pagination.pageSize + 1} to{\" \"}\n                {Math.min((pagination.pageIndex + 1) * pagination.pageSize, totalCount)} of{\" \"}\n                {totalCount} results\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              type=\"button\"\n              aria-label=\"Go to previous page\"\n              onClick={() => table.previousPage()}\n              disabled={onPaginationChange ? pageIndex === 1 : !table.getCanPreviousPage()}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            {onPaginationChange && renderPageNumbers()}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              type=\"button\"\n              aria-label=\"Go to next page\"\n              onClick={() => table.nextPage()}\n              disabled={\n                onPaginationChange ? pageIndex * pageSize >= totalCount : !table.getCanNextPage()\n              }\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n"
    }
  ]
}