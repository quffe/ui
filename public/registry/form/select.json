{
  "name": "select",
  "type": "registry:component",
  "category": "Form",
  "namespace": "@ui-components/form",
  "description": "Select component",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "path": "Form/Select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  placeholder?: string\n}\n\nconst Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  ({ className, children, placeholder, id, value, defaultValue, ...props }, ref) => {\n    const generatedId = React.useId()\n    const resolvedId = id ?? generatedId\n\n    const resolvedValue = value ?? defaultValue\n    const hasValue =\n      resolvedValue !== undefined &&\n      resolvedValue !== null &&\n      (typeof resolvedValue === \"number\" || String(resolvedValue).length > 0)\n\n    return (\n      <div className=\"relative\">\n        <select\n          id={resolvedId}\n          className={cn(\n            \"flex h-10 w-full appearance-none rounded-md border border-input bg-background px-3 py-2 pr-8 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n            className\n          )}\n          ref={ref}\n          {...(value !== undefined ? { value } : {})}\n          {...(defaultValue !== undefined ? { defaultValue } : {})}\n          {...props}\n        >\n          {placeholder && (\n            <option value=\"\" disabled hidden={hasValue}>\n              {placeholder}\n            </option>\n          )}\n          {children}\n        </select>\n        <ChevronDown\n          aria-hidden=\"true\"\n          focusable=\"false\"\n          className=\"pointer-events-none absolute right-3 top-3 h-4 w-4 opacity-50\"\n        />\n      </div>\n    )\n  }\n)\nSelect.displayName = \"Select\"\n\nexport { Select }\n"
    }
  ]
}