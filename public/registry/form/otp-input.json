{
  "name": "otp-input",
  "type": "registry:component",
  "category": "Form",
  "namespace": "@quffeui/form",
  "description": "One-time password input with multiple fields",
  "dependencies": [],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Input/OtpInput.tsx",
      "content": "\"use client\"\n\nimport React, { useImperativeHandle, useRef, useEffect } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Props for the OtpInput component\n */\ninterface OtpInputProps {\n  /** Number of OTP input fields */\n  length?: number\n  /** Current OTP value */\n  value: string\n  /** Callback when OTP value changes */\n  onChange: (value: string) => void\n  /** Whether the input is disabled */\n  disabled?: boolean\n  /** Placeholder character for empty fields */\n  placeholder?: string\n  /** Whether to mask the input (for sensitive data) */\n  mask?: boolean\n  /** Custom className for the container */\n  className?: string\n  /** Custom className for individual input fields */\n  inputClassName?: string\n  /** Whether to auto-submit when complete */\n  autoSubmit?: boolean\n  /** Callback when OTP is complete */\n  onComplete?: (value: string) => void\n  /** Error state */\n  error?: boolean\n  /** Size variant */\n  size?: \"sm\" | \"md\" | \"lg\"\n}\n\n/**\n * Ref interface for OtpInput component\n */\nexport interface OtpInputRef {\n  /** Focus the first input field */\n  focus: () => void\n  /** Clear all input fields */\n  clear: () => void\n  /** Get the current value */\n  getValue: () => string\n}\n\n/**\n * A one-time password (OTP) input component with multiple input fields\n *\n * Features:\n * - Configurable number of digits\n * - Auto-focus next field on input\n * - Backspace navigation\n * - Paste support\n * - Keyboard navigation (arrow keys)\n * - Accessibility support\n * - Size variants\n * - Error states\n * - Auto-submit on completion\n *\n * @example\n * ```tsx\n * <OtpInput\n *   length={6}\n *   value={otpValue}\n *   onChange={setOtpValue}\n *   onComplete={(code) => console.log('Complete:', code)}\n *   size=\"md\"\n * />\n * ```\n */\nexport const OtpInput = React.forwardRef<OtpInputRef, OtpInputProps>(\n  (\n    {\n      length = 6,\n      value,\n      onChange,\n      disabled = false,\n      placeholder = \"\",\n      mask = false,\n      className,\n      inputClassName,\n      autoSubmit = false,\n      onComplete,\n      error = false,\n      size = \"md\",\n    },\n    ref\n  ) => {\n    const inputRefs = useRef<HTMLInputElement[]>([])\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRefs.current[0]?.focus()\n      },\n      clear: () => {\n        onChange(\"\")\n        inputRefs.current[0]?.focus()\n      },\n      getValue: () => value,\n    }))\n\n    // Ensure refs array matches length\n    useEffect(() => {\n      inputRefs.current = inputRefs.current.slice(0, length)\n    }, [length])\n\n    // Handle auto-submit when OTP is complete\n    useEffect(() => {\n      if (value.length === length && onComplete) {\n        onComplete(value)\n        if (autoSubmit) {\n          // Blur all inputs when auto-submitting\n          inputRefs.current.forEach(input => input?.blur())\n        }\n      }\n    }, [value, length, onComplete, autoSubmit])\n\n    /**\n     * Handle input value changes with validation and navigation\n     */\n    const handleChange = (index: number, inputValue: string) => {\n      // Restrict to numbers only\n      if (inputValue && !/^\\d+$/.test(inputValue)) return\n\n      if (inputValue.length > 1) {\n        // Handle paste - extract only numeric characters\n        const pastedValue = inputValue.replace(/\\D/g, \"\").slice(0, length)\n        onChange(pastedValue)\n\n        // Focus the appropriate input after paste\n        const nextIndex = Math.min(pastedValue.length, length - 1)\n        setTimeout(() => {\n          inputRefs.current[nextIndex]?.focus()\n        }, 0)\n        return\n      }\n\n      // Handle single character input\n      const newValue = value.split(\"\")\n      newValue[index] = inputValue\n      const updatedValue = newValue.join(\"\")\n      onChange(updatedValue)\n\n      // Move to next input if current input is filled\n      if (inputValue && index < length - 1) {\n        setTimeout(() => {\n          inputRefs.current[index + 1]?.focus()\n        }, 0)\n      }\n    }\n\n    /**\n     * Handle keyboard navigation and special keys\n     */\n    const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n      switch (e.key) {\n        case \"Backspace\":\n          if (!value[index] && index > 0) {\n            // Move to previous input on backspace if current input is empty\n            setTimeout(() => {\n              inputRefs.current[index - 1]?.focus()\n            }, 0)\n          }\n          break\n        case \"ArrowLeft\":\n          if (index > 0) {\n            e.preventDefault()\n            inputRefs.current[index - 1]?.focus()\n          }\n          break\n        case \"ArrowRight\":\n          if (index < length - 1) {\n            e.preventDefault()\n            inputRefs.current[index + 1]?.focus()\n          }\n          break\n        case \"Delete\":\n          // Clear current field and stay focused\n          e.preventDefault()\n          const newValue = value.split(\"\")\n          newValue[index] = \"\"\n          onChange(newValue.join(\"\"))\n          break\n      }\n    }\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      const pasted = e.clipboardData.getData(\"Text\").replace(/\\D/g, \"\").slice(0, length)\n      if (!pasted) return\n\n      const newValues = []\n      for (let i = 0; i < length; i++) {\n        newValues[i] = pasted[i] || \"\"\n        if (inputRefs.current[i]) {\n          inputRefs.current[i]!.value = pasted[i] || \"\"\n        }\n      }\n      onChange(newValues.join(\"\"))\n\n      // Focus the last filled input\n      const last = Math.min(pasted.length, length) - 1\n      inputRefs.current[last]?.focus()\n    }\n\n    // Size variants\n    const sizeClasses = {\n      sm: \"w-8 h-8 text-sm\",\n      md: \"w-12 h-12 text-lg\",\n      lg: \"w-16 h-16 text-xl\",\n    }\n\n    return (\n      <div className={cn(\"flex gap-2 justify-center\", className)}>\n        {Array.from({ length }, (_, index) => {\n          const fieldValue = value[index] || \"\"\n          const displayValue = mask && fieldValue ? \"â€¢\" : fieldValue\n\n          return (\n            <Input\n              key={index}\n              ref={el => {\n                if (el) {\n                  inputRefs.current[index] = el\n                } else {\n                  delete inputRefs.current[index]\n                }\n              }}\n              onPaste={handlePaste}\n              type={mask ? \"password\" : \"text\"}\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              maxLength={length} // Allow paste of full value\n              value={displayValue}\n              onChange={e => handleChange(index, e.target.value)}\n              onKeyDown={e => handleKeyDown(index, e)}\n              disabled={disabled}\n              placeholder={placeholder}\n              className={cn(\n                \"text-center font-semibold transition-colors\",\n                sizeClasses[size],\n                error && \"border-destructive focus-visible:ring-destructive\",\n                inputClassName\n              )}\n              aria-label={`OTP digit ${index + 1} of ${length}`}\n              aria-describedby={error ? \"otp-error\" : undefined}\n              autoComplete=\"one-time-code\"\n            />\n          )\n        })}\n      </div>\n    )\n  }\n)\n\nOtpInput.displayName = \"OtpInput\"\n"
    }
  ]
}