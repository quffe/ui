{
  "name": "input-amount",
  "type": "registry:component",
  "category": "Form",
  "namespace": "@quffeui/form",
  "description": "Specialized input for monetary amounts with currency support",
  "dependencies": [],
  "registryDependencies": [
    "input",
    "label"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Input/InputAmount.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Props for the InputAmount component\n */\ninterface InputAmountProps extends Omit<React.ComponentProps<\"input\">, \"value\" | \"onChange\"> {\n  /** Current numeric value */\n  value?: number | null\n  /** Callback fired when the value changes */\n  onChange?: (value: number | null) => void\n  /** Placeholder text */\n  placeholder?: string\n  /** Whether the input is disabled */\n  disabled?: boolean\n  /** Optional label for the input */\n  label?: string\n  /** Error message to display */\n  error?: string\n  /** Additional CSS classes */\n  className?: string\n  /** Maximum number of decimal places allowed */\n  maxDecimals?: number\n  /** Whether to show currency symbol */\n  showCurrency?: boolean\n  /** Currency symbol to display */\n  currency?: string\n  /** Locale for number formatting */\n  locale?: string\n}\n\n/**\n * A specialized input component for entering monetary amounts with automatic formatting\n *\n * Features:\n * - Automatic comma formatting for thousands\n * - Decimal place control\n * - Numeric input validation\n * - Currency symbol support\n * - Proper accessibility attributes\n *\n * @example\n * ```tsx\n * <InputAmount\n *   value={amount}\n *   onChange={setAmount}\n *   label=\"Enter amount\"\n *   maxDecimals={2}\n *   showCurrency\n *   currency=\"$\"\n * />\n * ```\n */\nexport function InputAmount({\n  value = null,\n  onChange,\n  placeholder = \"0.00\",\n  disabled = false,\n  label,\n  error,\n  className,\n  maxDecimals = 2,\n  showCurrency = false,\n  currency = \"$\",\n  locale = \"en-US\", // eslint-disable-line @typescript-eslint/no-unused-vars\n  required,\n  ...props\n}: InputAmountProps) {\n  const [displayValue, setDisplayValue] = useState(\"\")\n  const [isFocused, setIsFocused] = useState(false)\n\n  /**\n   * Format number with locale-appropriate thousand separators\n   */\n  const formatWithCommas = (num: string): string => {\n    const parts = num.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\")\n  }\n\n  /**\n   * Remove formatting characters and return clean number string\n   */\n  const removeCommas = (str: string): string => {\n    return str.replace(/[,\\s]/g, \"\")\n  }\n\n  /**\n   * Validate if the input value is a valid number format\n   */\n  const isValidNumberFormat = (value: string): boolean => {\n    return /^\\d*\\.?\\d*$/.test(value)\n  }\n\n  // Update display value when prop value changes\n  useEffect(() => {\n    if (!isFocused && value !== null && value !== undefined) {\n      // Don't force decimal places, show the number as is\n      const valueStr = value % 1 === 0 ? value.toString() : value.toString()\n      const formatted = formatWithCommas(valueStr)\n      setDisplayValue(formatted)\n    }\n  }, [value, isFocused])\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value\n\n    // Remove commas for processing\n    const cleanValue = removeCommas(inputValue)\n\n    // Allow empty input\n    if (cleanValue === \"\") {\n      setDisplayValue(\"\")\n      onChange?.(null)\n      return\n    }\n\n    // Only allow numbers and one decimal point\n    if (!isValidNumberFormat(cleanValue)) {\n      return\n    }\n\n    // Prevent leading zeros (except for decimal values like 0.50)\n    if (cleanValue.length > 1 && cleanValue[0] === \"0\" && cleanValue[1] !== \".\") {\n      return\n    }\n\n    // Limit decimal places\n    const decimalIndex = cleanValue.indexOf(\".\")\n    if (decimalIndex !== -1 && cleanValue.length - decimalIndex - 1 > maxDecimals) {\n      return\n    }\n\n    // Update display with commas\n    const formattedValue = formatWithCommas(cleanValue)\n    setDisplayValue(formattedValue)\n\n    // Convert to number and call onChange\n    const numericValue = Number.parseFloat(cleanValue)\n    if (!isNaN(numericValue)) {\n      onChange?.(numericValue)\n    } else {\n      onChange?.(null)\n    }\n  }\n\n  const handleFocus = () => {\n    setIsFocused(true)\n  }\n\n  const handleBlur = () => {\n    setIsFocused(false)\n\n    // Format the final value on blur\n    const cleanValue = removeCommas(displayValue)\n    if (cleanValue && !isNaN(Number.parseFloat(cleanValue))) {\n      const formatted = formatWithCommas(cleanValue)\n      setDisplayValue(formatted)\n    }\n  }\n\n  return (\n    <div className={cn(\"space-y-2 w-full\", className)}>\n      {label && (\n        <Label htmlFor=\"amount-input\" className=\"text-sm font-medium\">\n          {label} {required && <span className=\"text-destructive\">*</span>}\n        </Label>\n      )}\n      <div className=\"relative\">\n        {showCurrency && (\n          <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none\">\n            {currency}\n          </div>\n        )}\n        <Input\n          id=\"amount-input\"\n          type=\"text\"\n          inputMode=\"decimal\"\n          value={displayValue}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            showCurrency && \"pl-8\",\n            error && \"border-destructive focus-visible:ring-destructive\"\n          )}\n          aria-describedby={error ? \"amount-error\" : undefined}\n          aria-invalid={error ? \"true\" : \"false\"}\n          {...props}\n        />\n      </div>\n      {error && (\n        <p id=\"amount-error\" className=\"text-sm text-destructive\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  )\n}\n"
    }
  ]
}