{
  "name": "file-input",
  "type": "registry:component",
  "category": "Form",
  "namespace": "@ui-components/form",
  "description": "File upload input with drag and drop support",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Form/FileInput.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Upload, X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nexport interface FileInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"type\"> {\n  onFileSelect?: (files: FileList | null) => void\n  showPreview?: boolean\n}\n\nconst FileInput = React.forwardRef<HTMLInputElement, FileInputProps>(\n  ({ className, onFileSelect, showPreview = false, id, onChange, ...props }, ref) => {\n    const [selectedFiles, setSelectedFiles] = React.useState<FileList | null>(null)\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const generatedId = React.useId()\n    const inputId = id ?? generatedId\n\n    React.useImperativeHandle(ref, () => inputRef.current!)\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { files } = event.target\n      const fileList = files && files.length > 0 ? files : null\n      setSelectedFiles(fileList)\n      onFileSelect?.(fileList)\n      onChange?.(event)\n    }\n\n    const clearFiles = () => {\n      setSelectedFiles(null)\n      if (inputRef.current) {\n        inputRef.current.value = \"\"\n        const event = new Event(\"change\", { bubbles: true })\n        inputRef.current.dispatchEvent(event)\n      }\n      onFileSelect?.(null)\n    }\n\n    const handleDrop = (event: React.DragEvent<HTMLLabelElement>) => {\n      event.preventDefault()\n      const files = event.dataTransfer.files\n      if (!files?.length) return\n\n      if (inputRef.current && typeof DataTransfer !== \"undefined\") {\n        const dataTransfer = new DataTransfer()\n        Array.from(files).forEach(file => dataTransfer.items.add(file))\n        inputRef.current.files = dataTransfer.files\n        const changeEvent = new Event(\"change\", { bubbles: true })\n        inputRef.current.dispatchEvent(changeEvent)\n      } else {\n        setSelectedFiles(files)\n        onFileSelect?.(files)\n      }\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        <div\n          className={cn(\n            \"group rounded-md border-2 border-dashed border-input bg-background transition-colors focus-within:border-ring focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 focus-within:ring-offset-background hover:bg-accent hover:text-accent-foreground\",\n            className\n          )}\n        >\n          <label\n            htmlFor={inputId}\n            onDragOver={event => event.preventDefault()}\n            onDrop={handleDrop}\n            className=\"flex h-32 w-full cursor-pointer flex-col items-center justify-center gap-2 text-center\"\n          >\n            <Upload aria-hidden=\"true\" focusable=\"false\" className=\"h-8 w-8 text-muted-foreground\" />\n            <p id={`${inputId}-instructions`} className=\"text-sm text-muted-foreground\">\n              Click to upload or drag and drop\n            </p>\n          </label>\n          <input\n            id={inputId}\n            ref={inputRef}\n            type=\"file\"\n            className=\"sr-only\"\n            aria-describedby={`${inputId}-instructions`}\n            onChange={handleFileChange}\n            {...props}\n          />\n        </div>\n\n        {showPreview && selectedFiles && selectedFiles.length > 0 && (\n          <div className=\"space-y-2\" aria-live=\"polite\">\n            {Array.from(selectedFiles).map((file, index) => (\n              <div\n                key={`${file.name}-${index}`}\n                className=\"flex items-center justify-between rounded-md bg-muted p-2\"\n              >\n                <span className=\"truncate text-sm\" title={file.name}>\n                  {file.name}\n                </span>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={clearFiles}\n                  aria-label={`Remove ${file.name}`}\n                >\n                  <X aria-hidden=\"true\" focusable=\"false\" className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n)\nFileInput.displayName = \"FileInput\"\n\nexport { FileInput }\n"
    }
  ]
}