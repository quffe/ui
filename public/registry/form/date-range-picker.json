{
  "name": "date-range-picker",
  "type": "registry:component",
  "category": "Form",
  "namespace": "@ui-components/form",
  "description": "Date range picker with presets and dual calendar view",
  "dependencies": [
    "lucide-react",
    "react-day-picker",
    "date-fns"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Input/DateRangePicker.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CalendarIcon } from \"lucide-react\"\nimport type { DateRange } from \"react-day-picker\"\nimport { format } from \"date-fns\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\n\ninterface DateRangePickerProps {\n  value?: DateRange\n  onChange?: (range: DateRange | undefined) => void\n  minDate?: Date\n  maxDate?: Date\n  placeholder?: string\n  className?: string\n  disabled?: boolean\n}\n\nexport function DateRangePicker({\n  value,\n  onChange,\n  minDate,\n  maxDate,\n  placeholder = \"Pick a date range\",\n  className,\n  disabled = false,\n}: DateRangePickerProps) {\n  const [open, setOpen] = React.useState(false)\n  const [isSelectingFrom, setIsSelectingFrom] = React.useState(true)\n\n  const getPresets = () => {\n    const today = new Date()\n    const yesterday = new Date(today)\n    yesterday.setDate(yesterday.getDate() - 1)\n\n    const lastWeekStart = new Date(today)\n    lastWeekStart.setDate(lastWeekStart.getDate() - 7)\n\n    const thisMonthStart = new Date(today.getFullYear(), today.getMonth(), 1)\n\n    const lastMonthStart = new Date(today.getFullYear(), today.getMonth() - 1, 1)\n    const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0)\n\n    const last3MonthsStart = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 91)\n\n    // Helper function to clamp dates to min/max bounds\n    const clampDateRange = (from: Date, to: Date): DateRange => {\n      const clampedFrom = minDate && from < minDate ? minDate : from\n      const clampedTo = maxDate && to > maxDate ? maxDate : to\n      return { from: clampedFrom, to: clampedTo }\n    }\n\n    return [\n      {\n        label: \"Today\",\n        range: clampDateRange(today, today),\n      },\n      {\n        label: \"Yesterday\",\n        range: clampDateRange(yesterday, yesterday),\n      },\n      {\n        label: \"Last Week\",\n        range: clampDateRange(lastWeekStart, today),\n      },\n      {\n        label: \"This Month\",\n        range: clampDateRange(thisMonthStart, today),\n      },\n      {\n        label: \"Last Month\",\n        range: clampDateRange(lastMonthStart, lastMonthEnd),\n      },\n      {\n        label: \"Last 3 Months\",\n        range: clampDateRange(last3MonthsStart, today),\n      },\n    ]\n  }\n\n  const presets = getPresets()\n\n  const formatDateRange = (range: DateRange | undefined) => {\n    if (!range?.from) {\n      return placeholder\n    }\n\n    if (!range.to) {\n      return format(range.from, \"MMM dd, yyyy\")\n    }\n\n    return `${format(range.from, \"MMM dd, yyyy\")} - ${format(range.to, \"MMM dd, yyyy\")}`\n  }\n\n  return (\n    <div className={cn(\"grid gap-2\", className)}>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant=\"outline\"\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !value?.from && \"text-muted-foreground\"\n            )}\n            disabled={disabled}\n            onClick={() => setIsSelectingFrom(true)}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {formatDateRange(value)}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <div className=\"flex\">\n            {/* Presets sidebar */}\n            <div className=\"flex flex-col border-r bg-muted/50 p-2 space-y-1 min-w-[140px]\">\n              <div className=\"px-2 py-1 text-xs font-medium text-muted-foreground\">Presets</div>\n              {presets.map(preset => (\n                <Button\n                  key={preset.label}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"justify-start h-8 px-2 text-xs\"\n                  onClick={() => {\n                    onChange?.(preset.range)\n                    setIsSelectingFrom(true)\n                    setOpen(false)\n                  }}\n                >\n                  {preset.label}\n                </Button>\n              ))}\n            </div>\n\n            {/* Calendar */}\n            <div>\n              <Calendar\n                initialFocus\n                mode=\"range\"\n                defaultMonth={value?.from}\n                selected={value}\n                onSelect={(_, triggerDate) => {\n                  if (!triggerDate) return\n\n                  if (isSelectingFrom) {\n                    // First click - set 'from' date only\n                    onChange?.({ from: triggerDate, to: undefined })\n                    setIsSelectingFrom(false)\n                  } else {\n                    // Second click - set 'to' date and close modal\n                    onChange?.({ from: value?.from, to: triggerDate })\n                    setIsSelectingFrom(true)\n                    setOpen(false)\n                  }\n                }}\n                numberOfMonths={2}\n                disabled={date => {\n                  if (minDate && date < minDate) return true\n                  if (maxDate && date > maxDate) return true\n\n                  if (!isSelectingFrom && value?.from) {\n                    const maxToDate = new Date(value.from)\n                    maxToDate.setDate(maxToDate.getDate() + 91)\n                    if (date > maxToDate) return true\n                  }\n\n                  return false\n                }}\n              />\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n"
    }
  ]
}