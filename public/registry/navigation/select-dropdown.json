{
  "name": "select-dropdown",
  "type": "registry:component",
  "category": "Navigation",
  "namespace": "@ui-components/navigation",
  "description": "Custom dropdown with keyboard navigation",
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Navigation/SelectDropdown.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronDown } from \"lucide-react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst dropdownVariants = cva(\n  \"relative w-full rounded-md border border-input bg-background text-sm ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default: \"border-input\",\n        error: \"border-destructive\",\n      },\n      size: {\n        default: \"h-10\",\n        sm: \"h-8 text-xs\",\n        lg: \"h-12 text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface SelectDropdownOption<T> {\n  label: string\n  value: T\n  disabled?: boolean\n}\n\ninterface DropdownProps<T> extends VariantProps<typeof dropdownVariants> {\n  options: SelectDropdownOption<T>[]\n  value: T | null\n  onChange: (value: T) => void\n  placeholder?: string\n  disabled?: boolean\n  className?: string\n  error?: string\n  name?: string\n  required?: boolean\n  id?: string\n  \"aria-label\"?: string\n}\n\nexport function SelectDropdown<T>({\n  options,\n  value,\n  onChange,\n  placeholder = \"Select an option\",\n  disabled = false,\n  className,\n  variant,\n  size,\n  error,\n  name,\n  required,\n  \"aria-label\": ariaLabel,\n}: DropdownProps<T>) {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const dropdownRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n  const listboxId = React.useId()\n\n  // Find the selected option\n  const selectedOption = options.find(option => option.value === value)\n\n  // Close dropdown when clicking outside\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n    }\n  }, [])\n\n  // Handle keyboard navigation\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (disabled) return\n\n    if (event.key === \"Escape\") {\n      setIsOpen(false)\n      return\n    }\n\n    if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n      event.preventDefault()\n\n      if (!isOpen) {\n        setIsOpen(true)\n        return\n      }\n\n      const currentIndex = value !== null ? options.findIndex(option => option.value === value) : -1\n      const availableOptions = options.filter(option => !option.disabled)\n\n      if (availableOptions.length === 0) return\n\n      let nextIndex: number\n\n      if (currentIndex === -1) {\n        nextIndex = event.key === \"ArrowDown\" ? 0 : availableOptions.length - 1\n      } else {\n        const currentAvailableIndex = availableOptions.findIndex(option => option.value === value)\n\n        if (event.key === \"ArrowDown\") {\n          nextIndex = (currentAvailableIndex + 1) % availableOptions.length\n        } else {\n          nextIndex =\n            (currentAvailableIndex - 1 + availableOptions.length) % availableOptions.length\n        }\n      }\n\n      onChange(availableOptions[nextIndex].value)\n    }\n\n    if (event.key === \"Enter\" || event.key === \" \") {\n      event.preventDefault()\n      setIsOpen(prev => !prev)\n    }\n  }\n\n  return (\n    <div className=\"space-y-1\">\n      <div\n        ref={dropdownRef}\n        className={cn(dropdownVariants({ variant: error ? \"error\" : variant, size }), className)}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          ref={buttonRef}\n          type=\"button\"\n          variant=\"ghost\"\n          className={cn(\n            \"flex h-full w-full justify-between font-normal\",\n            !selectedOption && \"text-muted-foreground\"\n          )}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          disabled={disabled}\n          aria-haspopup=\"listbox\"\n          aria-expanded={isOpen}\n          aria-labelledby={ariaLabel}\n          aria-controls={isOpen ? listboxId : undefined}\n        >\n          <span className=\"truncate\">{selectedOption ? selectedOption.label : placeholder}</span>\n          <ChevronDown\n            className={cn(\"ml-2 h-4 w-4 shrink-0 opacity-50\", isOpen && \"rotate-180 transform\")}\n          />\n        </Button>\n\n        {isOpen && (\n          <div className=\"absolute left-0 z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border bg-popover p-1 text-popover-foreground shadow-md\">\n            <ul\n              className=\"py-1\"\n              role=\"listbox\"\n              id={listboxId}\n              aria-labelledby={ariaLabel}\n              tabIndex={-1}\n            >\n              {options.map((option, index) => (\n                <li\n                  key={index}\n                  role=\"option\"\n                  aria-selected={value === option.value}\n                  aria-disabled={option.disabled}\n                  className={cn(\n                    \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none\",\n                    value === option.value && \"bg-accent text-accent-foreground\",\n                    !option.disabled &&\n                      \"cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    option.disabled && \"pointer-events-none opacity-50\"\n                  )}\n                  onClick={() => {\n                    if (!option.disabled) {\n                      onChange(option.value)\n                      setIsOpen(false)\n                      buttonRef.current?.focus()\n                    }\n                  }}\n                >\n                  <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n                    {value === option.value && <Check className=\"h-4 w-4\" />}\n                  </span>\n                  <span className=\"truncate\">{option.label}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      {error && <p className=\"text-xs text-destructive\">{error}</p>}\n      {name && (\n        <input\n          type=\"hidden\"\n          name={name}\n          value={value !== null ? String(value) : \"\"}\n          required={required}\n        />\n      )}\n    </div>\n  )\n}\n"
    }
  ]
}