{
  "name": "github-mention",
  "type": "registry:component",
  "category": "Mentions",
  "namespace": "@ui-components/mentions",
  "description": "Compact metadata card for GitHub resources (PRs, Issues, Users, Repos)",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "badge",
    "avatar",
    "tooltip",
    "separator",
    "skeleton",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Mentions/Github/GithubMention.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport Link from \"next/link\"\n\nimport { useGithubMention } from \"@/hooks/use-github-mention\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource } from \"@/lib/github/types\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype GithubMentionProps = {\n  url: string\n  useServer?: boolean\n  className?: string\n}\n\nexport function GithubMention({ url, useServer, className }: GithubMentionProps) {\n  const { data, isLoading, error, refetch } = useGithubMention(url, { useServer })\n\n  if (isLoading) return <GithubMentionSkeleton className={className} />\n  if (error || !data) return <GithubMentionError url={url} onRetry={refetch} className={className} />\n\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex items-start gap-4\">\n        {renderContent(data)}\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GithubMentionSkeleton({ className }: { className?: string }) {\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex items-start gap-4\">\n        <Skeleton className=\"size-8 rounded-full\" />\n        <div className=\"flex-1 space-y-2\">\n          <Skeleton className=\"h-4 w-1/2\" />\n          <Skeleton className=\"h-3 w-1/3\" />\n          <Skeleton className=\"h-3 w-2/3\" />\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GithubMentionError({ url, onRetry, className }: { url: string; onRetry: () => void; className?: string }) {\n  const parsed = parseGithubUrl(url)\n  return (\n    <Card aria-live=\"polite\" className={className}>\n      <CardContent className=\"flex items-center justify-between gap-4\">\n        <div className=\"min-w-0\">\n          <p className=\"text-sm font-medium\">Could not load GitHub resource</p>\n          <p className=\"text-muted-foreground text-xs truncate\">{parsed.kind !== \"unknown\" ? url : \"Invalid GitHub URL\"}</p>\n        </div>\n        <Button size=\"sm\" onClick={onRetry} aria-label=\"Retry loading GitHub data\">\n          Retry\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction renderContent(data: GithubResource) {\n  switch (data.kind) {\n    case \"pull\":\n      return <PullContent data={data} />\n    case \"issue\":\n      return <IssueContent data={data} />\n    case \"user\":\n      return <UserContent data={data} />\n    case \"repo\":\n      return <RepoContent data={data} />\n    default:\n      return <p className=\"text-sm\">Unsupported GitHub URL</p>\n  }\n}\n\nfunction PullContent({ data }: { data: Extract<GithubResource, { kind: \"pull\" }> }) {\n  const status = data.merged ? \"merged\" : data.draft ? \"draft\" : data.state\n  const statusVariant = data.merged ? \"secondary\" : data.state === \"open\" ? \"default\" : \"outline\"\n  const created = new Date(data.created_at).toLocaleDateString(undefined, { year: \"numeric\", month: \"short\", day: \"numeric\" })\n  const labels = (data.labels ?? []).slice(0, 3)\n  const extra = (data.labels?.length ?? 0) - labels.length\n\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar>\n        <AvatarImage src={data.user.avatar_url ?? undefined} alt={`${data.user.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.user.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={statusVariant as any} aria-label={`PR status: ${status}`}>{statusLabel(status)}</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            #{data.number} {data.title}\n          </Link>\n        </div>\n        <div className=\"text-muted-foreground mt-1 flex items-center gap-2 text-xs\">\n          <span>\n            by <Link href={data.user.html_url} className=\"hover:underline\">{data.user.login}</Link>\n          </span>\n          <Separator className=\"mx-1 h-3 w-px\" />\n          <span>opened {created}</span>\n          {data.base?.repo?.full_name ? (\n            <>\n              <Separator className=\"mx-1 h-3 w-px\" />\n              <span className=\"truncate\">{data.base.repo.full_name}</span>\n            </>\n          ) : null}\n        </div>\n        {!!labels.length && (\n          <div className=\"mt-2 flex flex-wrap items-center gap-1\">\n            {labels.map(l => (\n              <Badge key={l.id} variant=\"secondary\" aria-label={`Label ${l.name}`} className=\"truncate max-w-[10rem]\">\n                {l.name}\n              </Badge>\n            ))}\n            {extra > 0 && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Badge variant=\"outline\" aria-label={`+${extra} more labels`}>+{extra}</Badge>\n                </TooltipTrigger>\n                <TooltipContent>\n                  {(data.labels ?? []).slice(labels.length).map(l => l.name).join(\", \")}\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction IssueContent({ data }: { data: Extract<GithubResource, { kind: \"issue\" }> }) {\n  const status = data.state\n  const statusVariant = data.state === \"open\" ? \"default\" : \"outline\"\n  const created = new Date(data.created_at).toLocaleDateString(undefined, { year: \"numeric\", month: \"short\", day: \"numeric\" })\n\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar>\n        <AvatarImage src={data.user.avatar_url ?? undefined} alt={`${data.user.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.user.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={statusVariant as any} aria-label={`Issue status: ${status}`}>{statusLabel(status)}</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            #{data.number} {data.title}\n          </Link>\n        </div>\n        <div className=\"text-muted-foreground mt-1 flex items-center gap-2 text-xs\">\n          <span>\n            by <Link href={data.user.html_url} className=\"hover:underline\">{data.user.login}</Link>\n          </span>\n          <Separator className=\"mx-1 h-3 w-px\" />\n          <span>opened {created}</span>\n          {typeof data.comments === \"number\" && (\n            <>\n              <Separator className=\"mx-1 h-3 w-px\" />\n              <span>{data.comments} comments</span>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction UserContent({ data }: { data: Extract<GithubResource, { kind: \"user\" }> }) {\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar className=\"size-10\">\n        <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n          {data.name ?? data.login} <span className=\"text-muted-foreground\">@{data.login}</span>\n        </Link>\n        {data.bio ? <p className=\"text-muted-foreground mt-1 line-clamp-2 text-xs\">{data.bio}</p> : null}\n        <div className=\"text-muted-foreground mt-2 flex flex-wrap items-center gap-3 text-xs\">\n          {typeof data.followers === \"number\" && <span>{data.followers} followers</span>}\n          {typeof data.following === \"number\" && <span>{data.following} following</span>}\n          {data.location ? <span className=\"truncate\">{data.location}</span> : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction RepoContent({ data }: { data: Extract<GithubResource, { kind: \"repo\" }> }) {\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <div className=\"size-8 shrink-0 rounded-full border text-xs font-medium grid place-items-center\" aria-hidden>\n        {data.name[0]?.toUpperCase()}\n      </div>\n      <div className=\"min-w-0 flex-1\">\n        <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n          {data.full_name}\n        </Link>\n        {data.description ? <p className=\"text-muted-foreground mt-1 line-clamp-2 text-xs\">{data.description}</p> : null}\n        <div className=\"text-muted-foreground mt-2 flex flex-wrap items-center gap-3 text-xs\">\n          {typeof data.stargazers_count === \"number\" && <span>â˜… {data.stargazers_count}</span>}\n          {typeof data.forks_count === \"number\" && <span>â‘‚ {data.forks_count}</span>}\n          {typeof data.open_issues_count === \"number\" && <span>issues {data.open_issues_count}</span>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction statusLabel(status: string) {\n  switch (status) {\n    case \"open\":\n      return \"Open\"\n    case \"closed\":\n      return \"Closed\"\n    case \"merged\":\n      return \"Merged\"\n    case \"draft\":\n      return \"Draft\"\n    default:\n      return status\n  }\n}\n\nexport default GithubMention\n\n"
    }
  ]
}