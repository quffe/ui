{
  "name": "github-mention",
  "type": "registry:component",
  "category": "Mentions",
  "namespace": "@ui-components/mentions",
  "description": "Compact metadata card for GitHub resources (PRs, Issues, Users, Repos)",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "badge",
    "avatar",
    "tooltip",
    "separator",
    "skeleton",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Mentions/Github/GithubMention.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useEffect } from \"react\"\nimport Link from \"next/link\"\n\nimport { useGithubMention } from \"@/hooks/use-github-mention\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource } from \"@/lib/github/types\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { GitPullRequest, GitMerge } from \"lucide-react\"\n\ntype GithubMentionProps = {\n  url: string\n  useServer?: boolean\n  className?: string\n  linkProps?: React.ComponentProps<\"a\">\n  onError?: (error: Error) => void\n}\n\nexport function GithubMention({ url, useServer, className, linkProps, onError }: GithubMentionProps) {\n  const { data, isLoading, error, refetch } = useGithubMention(url, { useServer })\n\n  useEffect(() => {\n    if (error) onError?.(error)\n  }, [error, onError])\n\n  if (isLoading) return <GithubMentionSkeleton className={className} />\n  if (error || !data)\n    return <GithubMentionError url={url} onRetry={refetch} className={className} error={error ?? undefined} />\n  return <div className={className}>{renderContent(data, linkProps)}</div>\n}\n\nfunction GithubMentionSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={`inline-flex items-baseline gap-2 ${className ?? \"\"}`} aria-busy=\"true\">\n      <Skeleton className=\"h-4 w-4 rounded-full\" />\n      <div className=\"flex items-baseline gap-2\">\n        <Skeleton className=\"h-4 w-48\" />\n        <Skeleton className=\"h-4 w-28\" />\n      </div>\n    </div>\n  )\n}\n\nfunction GithubMentionError({ url, onRetry, className, error }: { url: string; onRetry: () => void; className?: string; error?: Error }) {\n  const parsed = parseGithubUrl(url)\n  const anyErr = error as unknown as { statusCode?: number; code?: string; message?: string } | undefined\n  return (\n    <div className={`inline-flex items-center gap-2 ${className ?? \"\"}`}> \n      <span className=\"text-xs text-muted-foreground\">Could not load</span>\n      <span className=\"text-xs truncate max-w-[24rem] text-muted-foreground\">{parsed.kind !== \"unknown\" ? url : \"Invalid GitHub URL\"}</span>\n      <Button size=\"sm\" variant=\"outline\" onClick={onRetry} aria-label=\"Retry loading GitHub data\" title={anyErr?.message}>\n        Retry\n      </Button>\n      {error ? (\n        <span className=\"text-[11px] text-muted-foreground\">\n          {anyErr?.statusCode ? `HTTP ${anyErr.statusCode}` : null}\n          {anyErr?.code ? ` (${anyErr.code})` : null}\n          {anyErr?.statusCode || anyErr?.code ? \": \" : null}\n          {error.message}\n          {anyErr?.code === \"RATE_LIMITED\" ? \" â€“ add GITHUB_TOKEN and/or useServer for higher limits\" : null}\n        </span>\n      ) : null}\n    </div>\n  )\n}\n\nfunction renderContent(data: GithubResource, linkProps?: React.ComponentProps<\"a\">) {\n  switch (data.kind) {\n    case \"pull\":\n      return <PullContent data={data} linkProps={linkProps} />\n    case \"issue\":\n      return <IssueContent data={data} linkProps={linkProps} />\n    case \"user\":\n      return <UserContent data={data} linkProps={linkProps} />\n    case \"repo\":\n      return <RepoContent data={data} linkProps={linkProps} />\n    default:\n      return <p className=\"text-sm\">Unsupported GitHub URL</p>\n  }\n}\n\nfunction PullContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"pull\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const status = data.merged ? \"merged\" : data.draft ? \"draft\" : data.state\n  const meta = getStatusMeta(\"pull\", status)\n  const repo = data.base?.repo?.full_name ?? repoFromUrl(data.html_url)\n  const aria = `Open PR #${data.number} in ${repo}`\n\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {meta.icon}\n      </span>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\"> {repo}#{data.number}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction IssueContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"issue\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const status = data.state\n  const meta = getStatusMeta(\"issue\", status)\n  const repo = repoFromUrl(data.html_url)\n  const aria = `Open issue #${data.number} in ${repo}`\n\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {meta.icon}\n      </span>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\"> {repo}#{data.number}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction UserContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"user\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const aria = `Open GitHub profile for ${data.login}`\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <Avatar className=\"size-4\">\n        <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.name ?? data.login}</bdi>\n        <span className=\"text-muted-foreground\"> @{data.login}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction RepoContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"repo\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const aria = `Open repository ${data.full_name}`\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.full_name}</bdi>\n      </Link>\n    </div>\n  )\n}\n\nfunction getStatusMeta(kind: \"pull\" | \"issue\", status: string) {\n  const base = \"inline-flex items-center gap-1 rounded-full text-white\"\n  const iconClass = \"size-4 align-text-bottom\"\n  if (kind === \"pull\") {\n    if (status === \"merged\") return { label: \"Merged\", className: `${base}`, icon: <GitMerge className={iconClass} style={{ color: \"#8250df\" }} /> }\n    if (status === \"draft\") return { label: \"Draft\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#6e7781\" }} /> }\n    if (status === \"open\") return { label: \"Open\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#1f883d\" }} /> }\n    return { label: \"Closed\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#cf222e\" }} /> }\n  }\n  // issue\n  if (status === \"open\") return { label: \"Open\", className: `${base}`, icon: <svg aria-label=\"Open\" role=\"img\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"#1f883d\" className=\"inline-block align-text-bottom\"><circle cx=\"8\" cy=\"8\" r=\"6.5\" stroke=\"#1f883d\" /></svg> }\n  // Closed issue icon (check circle) with GitHub path\n  return {\n    label: \"Closed\",\n    className: `${base}`,\n    icon: (\n      <svg focusable=\"false\" aria-label=\"Closed\" role=\"img\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"#8250df\" className=\"inline-block align-text-bottom\">\n        <path d=\"M11.28 6.78a.75.75 0 0 0-1.06-1.06L7.25 8.69 5.78 7.22a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.06 0l3.5-3.5Z\"></path>\n        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-1.5 0a6.5 6.5 0 1 0-13 0 6.5 6.5 0 0 0 13 0Z\"></path>\n      </svg>\n    ),\n  }\n}\n\nfunction repoFromUrl(htmlUrl: string): string {\n  try {\n    const u = new URL(htmlUrl)\n    const p = u.pathname.split(\"/\").filter(Boolean)\n    if (p.length >= 2) return `${p[0]}/${p[1]}`\n    return htmlUrl\n  } catch {\n    return htmlUrl\n  }\n}\n\nexport default GithubMention\n"
    }
  ]
}