{
  "name": "useOnUnmountEffect",
  "type": "registry:hook",
  "namespace": "@ui-components/hooks",
  "description": "Hook that runs cleanup effect only on component unmount",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useOnUnmountEffect.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/**\n * A hook that runs cleanup logic only when the component unmounts\n *\n * This hook is useful when you need to perform cleanup operations\n * that should only happen when the component is being destroyed,\n * not during re-renders or updates.\n *\n * Features:\n * - Runs cleanup only on unmount\n * - No dependency tracking\n * - Memory efficient\n * - TypeScript support\n * - Perfect for resource cleanup\n *\n * @param cleanup - The cleanup function to run on unmount\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   useOnUnmountEffect(() => {\n *     console.log('Component is unmounting')\n *     // Cleanup resources, cancel subscriptions, etc.\n *   })\n *\n *   return <div>Component content</div>\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Cleanup event listeners on unmount\n * function WindowEventComponent() {\n *   useOnUnmountEffect(() => {\n *     // This only runs when component unmounts\n *     document.removeEventListener('keydown', handleKeyDown)\n *     window.removeEventListener('resize', handleResize)\n *   })\n *\n *   return <div>App content</div>\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Cancel network requests or timers\n * function DataComponent() {\n *   const abortControllerRef = useRef(new AbortController())\n *\n *   useOnUnmountEffect(() => {\n *     // Cancel any pending requests\n *     abortControllerRef.current.abort()\n *   })\n *\n *   return <div>Data component</div>\n * }\n * ```\n */\nexport function useOnUnmountEffect(cleanup: () => void): void {\n  const cleanupRef = React.useRef(cleanup)\n\n  // Store the latest cleanup function\n  cleanupRef.current = cleanup\n\n  // Set up the effect only once\n  React.useEffect(() => {\n    return () => {\n      cleanupRef.current()\n    }\n  }, []) // Empty deps - only runs on mount/unmount\n}\n\nexport default useOnUnmountEffect\n"
    }
  ]
}