{
  "name": "useOnMountEffect",
  "type": "registry:hook",
  "namespace": "@ui-components/hooks",
  "description": "Hook that runs effect only on component mount",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useOnMountEffect.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/**\n * A hook that runs an effect only once when the component mounts\n *\n * This is useful when you need to ensure an effect runs exactly once,\n * even if the dependencies change or the component re-renders.\n *\n * Features:\n * - Runs effect only on first mount\n * - Ignores dependency changes after first run\n * - Proper cleanup handling\n * - TypeScript support\n *\n * @param effect - The effect function to run on mount\n * @param dependencies - Optional dependencies array (effect runs when these change on first render only)\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   useOnMountEffect(() => {\n *     console.log('This runs only once on mount')\n *\n *     return () => {\n *       console.log('Cleanup on unmount')\n *     }\n *   })\n *\n *   return <div>Component content</div>\n * }\n * ```\n *\n * @example\n * ```tsx\n * // With dependencies (still only runs once)\n * function MyComponent({ userId }: { userId: string }) {\n *   useOnMountEffect(() => {\n *     fetchUserData(userId)\n *   }, [userId]) // userId is captured on mount, changes ignored\n *\n *   return <div>User profile</div>\n * }\n * ```\n */\nexport function useOnMountEffect(\n  effect: React.EffectCallback,\n  dependencies?: React.DependencyList\n): void {\n  const hasRunRef = React.useRef(false)\n  const cleanupRef = React.useRef<void | (() => void) | undefined>(undefined)\n\n  React.useEffect(() => {\n    if (!hasRunRef.current) {\n      hasRunRef.current = true\n      cleanupRef.current = effect()\n    }\n\n    // Return cleanup function that calls the original cleanup\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current()\n        cleanupRef.current = undefined\n      }\n    }\n  }, dependencies) // eslint-disable-line react-hooks/exhaustive-deps\n}\n\n/**\n * A hook that runs an effect only once on the first render, ignoring all dependencies\n *\n * This is a stricter version of useOnMountEffect that completely ignores dependencies.\n *\n * @param effect - The effect function to run on mount\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   useStrictMountEffect(() => {\n *     // This runs exactly once, no matter what\n *     initializeApp()\n *   })\n *\n *   return <div>App content</div>\n * }\n * ```\n */\nexport function useStrictMountEffect(effect: React.EffectCallback): void {\n  const hasRunRef = React.useRef(false)\n  const cleanupRef = React.useRef<void | (() => void) | undefined>(undefined)\n\n  React.useEffect(() => {\n    if (!hasRunRef.current) {\n      hasRunRef.current = true\n      cleanupRef.current = effect()\n    }\n\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current()\n        cleanupRef.current = undefined\n      }\n    }\n  }, []) // No dependencies\n}\n\n/**\n * A hook that tracks whether the component has mounted\n *\n * Useful for conditional rendering or effects that should only run after mount.\n *\n * @returns boolean indicating if the component has mounted\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const hasMounted = useHasMounted()\n *\n *   if (!hasMounted) {\n *     return <div>Loading...</div>\n *   }\n *\n *   return <div>Component is mounted!</div>\n * }\n * ```\n */\nexport function useHasMounted(): boolean {\n  const [hasMounted, setHasMounted] = React.useState(false)\n\n  React.useEffect(() => {\n    setHasMounted(true)\n  }, [])\n\n  return hasMounted\n}\n\n/**\n * Legacy export for backward compatibility\n * @deprecated Use `useOnMountEffect` instead\n */\nconst useOnMountEffect_Legacy = (callback: () => void): void => {\n  const renderRef = React.useRef(true)\n\n  React.useEffect(() => {\n    if (renderRef.current) {\n      callback()\n      renderRef.current = false\n    }\n  }, [callback])\n}\n\nexport default useOnMountEffect\n"
    }
  ]
}