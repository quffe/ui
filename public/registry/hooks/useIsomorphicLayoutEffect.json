{
  "name": "useIsomorphicLayoutEffect",
  "type": "registry:hook",
  "namespace": "@quffeui/hooks",
  "description": "Hook that uses layoutEffect on client, effect on server",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useIsomorphicLayoutEffect.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/**\n * A hook that provides SSR-safe layout effects\n *\n * This hook uses useLayoutEffect on the client side and useEffect on the server side,\n * preventing hydration mismatches in SSR applications. It's perfect for code that needs\n * to run synchronously with DOM mutations but also needs to be SSR-compatible.\n *\n * Features:\n * - SSR-safe implementation\n * - Client-side: uses useLayoutEffect (synchronous)\n * - Server-side: uses useEffect (async, no DOM)\n * - Prevents hydration mismatches\n * - TypeScript support\n * - Drop-in replacement for useLayoutEffect\n *\n * @param effect - The effect function to run\n * @param dependencies - Dependencies array to watch for changes\n *\n * @example\n * ```tsx\n * function ResponsiveComponent() {\n *   const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\n *   const ref = useRef<HTMLDivElement>(null)\n *\n *   useIsomorphicLayoutEffect(() => {\n *     if (ref.current) {\n *       const rect = ref.current.getBoundingClientRect()\n *       setDimensions({ width: rect.width, height: rect.height })\n *     }\n *   }, [])\n *\n *   return <div ref={ref}>Size: {dimensions.width}x{dimensions.height}</div>\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Theme setup that works with SSR\n * function ThemeProvider({ children, theme }: { children: React.ReactNode, theme: string }) {\n *   useIsomorphicLayoutEffect(() => {\n *     // This runs synchronously on client, safely on server\n *     document.documentElement.setAttribute('data-theme', theme)\n *\n *     return () => {\n *       document.documentElement.removeAttribute('data-theme')\n *     }\n *   }, [theme])\n *\n *   return <div className=\"theme-provider\">{children}</div>\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Focus management with SSR support\n * function AutoFocusInput({ autoFocus }: { autoFocus?: boolean }) {\n *   const inputRef = useRef<HTMLInputElement>(null)\n *\n *   useIsomorphicLayoutEffect(() => {\n *     if (autoFocus && inputRef.current) {\n *       inputRef.current.focus()\n *     }\n *   }, [autoFocus])\n *\n *   return <input ref={inputRef} placeholder=\"Auto-focused input\" />\n * }\n * ```\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? React.useLayoutEffect : React.useEffect\n\n/**\n * A mount-only version of useIsomorphicLayoutEffect\n *\n * Combines the SSR-safety of useIsomorphicLayoutEffect with the mount-only\n * behavior of useOnMountEffect. Perfect for one-time setup that needs to\n * be synchronous on the client but SSR-safe.\n *\n * @param effect - The effect function to run on mount\n * @param dependencies - Optional dependencies array (captured on first render only)\n *\n * @example\n * ```tsx\n * function SSRSafeComponent() {\n *   const ref = useRef<HTMLDivElement>(null)\n *\n *   useIsomorphicMountEffect(() => {\n *     // Runs once on mount, synchronously on client, safely on server\n *     if (ref.current) {\n *       const height = ref.current.offsetHeight\n *       console.log('Initial height:', height)\n *     }\n *   })\n *\n *   return <div ref={ref}>SSR-safe content</div>\n * }\n * ```\n */\nexport function useIsomorphicMountEffect(\n  effect: React.EffectCallback,\n  dependencies?: React.DependencyList\n): void {\n  const hasRunRef = React.useRef(false)\n  const cleanupRef = React.useRef<void | (() => void) | undefined>(undefined)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!hasRunRef.current) {\n      hasRunRef.current = true\n      cleanupRef.current = effect()\n    }\n\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current()\n        cleanupRef.current = undefined\n      }\n    }\n  }, dependencies) // eslint-disable-line react-hooks/exhaustive-deps\n}\n\nexport default useIsomorphicLayoutEffect\n"
    }
  ]
}