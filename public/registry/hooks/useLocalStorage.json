{
  "name": "useLocalStorage",
  "type": "registry:hook",
  "namespace": "@quffeui/hooks",
  "description": "Hook for persisting state to localStorage with SSR support",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useLocalStorage.tsx",
      "content": "\"use client\"\n\nimport { useState, useLayoutEffect, useRef, SetStateAction, Dispatch } from \"react\"\n\nexport const useLocalStorage = <T,>(\n  keyName: string,\n  defaultValue?: T\n): [T, Dispatch<SetStateAction<T>>] => {\n  const defaultValueRef = useRef(defaultValue)\n  const initializedRef = useRef(false)\n\n  // Always start with the default value to ensure SSR/client consistency\n  const [storedValue, setStoredValue] = useState<T>(defaultValue as T)\n\n  // Update ref when defaultValue changes\n  defaultValueRef.current = defaultValue\n\n  // Load from localStorage after hydration (before paint)\n  useLayoutEffect(() => {\n    if (initializedRef.current) return // Prevent re-initialization\n\n    try {\n      if (typeof window !== \"undefined\") {\n        const value = window.localStorage.getItem(keyName)\n        if (value !== null) {\n          // Value exists in localStorage (even if it's an empty string)\n          const parsedValue = JSON.parse(value)\n          setStoredValue(parsedValue)\n        } else if (defaultValueRef.current !== undefined) {\n          // No value in localStorage, store the default\n          window.localStorage.setItem(keyName, JSON.stringify(defaultValueRef.current))\n        }\n        initializedRef.current = true\n      }\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${keyName}\":`, error)\n      initializedRef.current = true\n    }\n  }, [keyName]) // Remove defaultValue from dependencies\n\n  const setValue = (newValue: Parameters<typeof setStoredValue>[0]) => {\n    try {\n      if (typeof window !== \"undefined\") {\n        // Always use JSON serialization for consistency\n        window.localStorage.setItem(keyName, JSON.stringify(newValue))\n      }\n      setStoredValue(newValue)\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${keyName}\":`, error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"
    }
  ]
}