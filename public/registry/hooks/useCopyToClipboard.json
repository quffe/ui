{
  "name": "useCopyToClipboard",
  "type": "registry:hook",
  "namespace": "@quffeui/hooks",
  "description": "Hook for copying text to clipboard with feedback",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useCopyToClipboard.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/**\n * Options for the copy to clipboard hook\n */\nexport interface UseCopyToClipboardOptions {\n  /** Function to call on successful copy */\n  onSuccess?: (text: string) => void\n  /** Function to call on copy error */\n  onError?: (error: Error) => void\n  /** Timeout for success state in milliseconds (default: 2000) */\n  timeout?: number\n  /** Whether to show default toast notifications */\n  showToast?: boolean\n  /** Custom toast implementation */\n  toast?: (message: string, type?: \"success\" | \"error\") => void\n}\n\n/**\n * Return type for the copy to clipboard hook\n */\nexport interface UseCopyToClipboardReturn {\n  /** Function to copy text to clipboard */\n  copy: (text: string, label?: string) => Promise<boolean>\n  /** Whether the copy operation was successful */\n  copied: boolean\n  /** Any error that occurred during copying */\n  error: Error | null\n  /** Whether a copy operation is in progress */\n  isLoading: boolean\n}\n\n/**\n * A hook for copying text to clipboard with comprehensive error handling and state management\n *\n * Features:\n * - Modern Clipboard API with fallback\n * - Loading and success states\n * - Error handling\n * - Customizable notifications\n * - Auto-reset after timeout\n * - TypeScript support\n *\n * @param options - Configuration options\n * @returns Object with copy function and state\n *\n * @example\n * ```tsx\n * function CopyButton({ text }: { text: string }) {\n *   const { copy, copied, error, isLoading } = useCopyToClipboard({\n *     onSuccess: (text) => console.log('Copied:', text),\n *     onError: (error) => console.error('Copy failed:', error),\n *     timeout: 3000\n *   })\n *\n *   return (\n *     <button\n *       onClick={() => copy(text, 'API Key')}\n *       disabled={isLoading}\n *     >\n *       {isLoading ? 'Copying...' : copied ? 'Copied!' : 'Copy'}\n *     </button>\n *   )\n * }\n * ```\n */\nexport function useCopyToClipboard({\n  onSuccess,\n  onError,\n  timeout = 2000,\n  showToast = false,\n  toast,\n}: UseCopyToClipboardOptions = {}): UseCopyToClipboardReturn {\n  const [copied, setCopied] = React.useState(false)\n  const [error, setError] = React.useState<Error | null>(null)\n  const [isLoading, setIsLoading] = React.useState(false)\n  const timeoutRef = React.useRef<ReturnType<typeof setTimeout> | undefined>(undefined)\n\n  /**\n   * Fallback copy method for older browsers\n   */\n  const fallbackCopy = (text: string): boolean => {\n    const textArea = document.createElement(\"textarea\")\n    textArea.value = text\n    textArea.style.position = \"fixed\"\n    textArea.style.left = \"-999999px\"\n    textArea.style.top = \"-999999px\"\n    document.body.appendChild(textArea)\n    textArea.focus()\n    textArea.select()\n\n    try {\n      const successful = document.execCommand(\"copy\")\n      document.body.removeChild(textArea)\n      return successful\n    } catch {\n      document.body.removeChild(textArea)\n      throw new Error(\"Fallback copy failed\")\n    }\n  }\n\n  /**\n   * Copy text to clipboard\n   */\n  const copy = React.useCallback(\n    async (text: string, label?: string): Promise<boolean> => {\n      if (!text) {\n        const emptyError = new Error(\"No text provided to copy\")\n        setError(emptyError)\n        onError?.(emptyError)\n        return false\n      }\n\n      setIsLoading(true)\n      setError(null)\n\n      // Clear existing timeout\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n\n      try {\n        // Try modern Clipboard API first\n        if (navigator.clipboard && window.isSecureContext) {\n          await navigator.clipboard.writeText(text)\n        } else {\n          // Fallback for older browsers or non-secure contexts\n          const success = fallbackCopy(text)\n          if (!success) {\n            throw new Error(\"Clipboard write failed\")\n          }\n        }\n\n        setCopied(true)\n        setError(null)\n\n        // Show notification\n        const message = label ? `Copied ${label}` : `Copied: ${text}`\n\n        if (showToast && toast) {\n          toast(message, \"success\")\n        } else if (showToast && typeof window !== \"undefined\" && \"sonner\" in window) {\n          // Use sonner if available globally\n          const { toast: sonnerToast } = await import(\"sonner\")\n          sonnerToast.success(message)\n        }\n\n        onSuccess?.(text)\n\n        // Auto-reset after timeout\n        timeoutRef.current = setTimeout(() => {\n          setCopied(false)\n        }, timeout)\n\n        return true\n      } catch (err) {\n        const copyError = err instanceof Error ? err : new Error(\"Copy operation failed\")\n        setError(copyError)\n        setCopied(false)\n\n        if (showToast && toast) {\n          toast(\"Failed to copy to clipboard\", \"error\")\n        } else if (showToast && typeof window !== \"undefined\" && \"sonner\" in window) {\n          const { toast: sonnerToast } = await import(\"sonner\")\n          sonnerToast.error(\"Failed to copy to clipboard\")\n        }\n\n        onError?.(copyError)\n        return false\n      } finally {\n        setIsLoading(false)\n      }\n    },\n    [onSuccess, onError, timeout, showToast, toast]\n  )\n\n  // Cleanup timeout on unmount\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  return {\n    copy,\n    copied,\n    error,\n    isLoading,\n  }\n}\n\n/**\n * Legacy hook for backward compatibility\n * @deprecated Use `useCopyToClipboard` instead\n */\nexport const useCopyToClipboard_Legacy = () => {\n  const { copy } = useCopyToClipboard({ showToast: true })\n\n  return React.useCallback(\n    (text: string, label?: string) => {\n      copy(text, label)\n    },\n    [copy]\n  )\n}\n"
    }
  ]
}