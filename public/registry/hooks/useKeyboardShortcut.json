{
  "name": "useKeyboardShortcut",
  "type": "registry:hook",
  "namespace": "@ui-components/hooks",
  "description": "Hook for handling keyboard shortcuts with context",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/useKeyboardShortcut.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\n/**\n * Keyboard shortcut configuration\n */\nexport interface KeyboardShortcut {\n  /** Unique identifier for the shortcut */\n  id: string\n  /** The key combination (e.g., \"ctrl+k\", \"shift+?\", \"escape\") */\n  keys: string\n  /** Description shown in tooltips and help */\n  description: string\n  /** Category for grouping shortcuts */\n  category?: string\n  /** Whether the shortcut is enabled */\n  enabled?: boolean\n  /** Priority for conflicting shortcuts (higher = more priority) */\n  priority?: number\n}\n\ntype KeyboardShortcutListenerEntry = {\n  id: string\n  callback: (event: KeyboardEvent) => void\n  order: number\n}\n\n/**\n * Global keyboard shortcut registry\n */\nclass KeyboardShortcutRegistry {\n  private shortcuts = new Map<string, KeyboardShortcut>()\n  private listeners = new Map<string, KeyboardShortcutListenerEntry[]>()\n  private elementShortcuts = new Map<HTMLElement, KeyboardShortcut>()\n  private showTooltips = false\n  private tooltipListeners = new Set<() => void>()\n  private registrationCounter = 0\n\n  /**\n   * Register a keyboard shortcut\n   */\n  register(shortcut: KeyboardShortcut, callback: (event: KeyboardEvent) => void) {\n    const key = this.normalizeKeys(shortcut.keys)\n\n    // Store shortcut config\n    this.shortcuts.set(shortcut.id, { ...shortcut, keys: key })\n\n    const listeners = this.listeners.get(key) ?? []\n    const alreadyRegistered = listeners.some(\n      entry => entry.id === shortcut.id && entry.callback === callback\n    )\n    if (!alreadyRegistered) {\n      const listenerEntry: KeyboardShortcutListenerEntry = {\n        id: shortcut.id,\n        callback,\n        order: this.registrationCounter++,\n      }\n      listeners.push(listenerEntry)\n      this.listeners.set(key, listeners)\n    }\n\n    return () => this.unregister(shortcut.id, callback)\n  }\n\n  /**\n   * Unregister a keyboard shortcut\n   */\n  unregister(shortcutId: string, callback: (event: KeyboardEvent) => void) {\n    const shortcut = this.shortcuts.get(shortcutId)\n    if (!shortcut) return\n\n    const listeners = this.listeners.get(shortcut.keys)\n    if (listeners) {\n      const nextListeners = listeners.filter(entry => entry.callback !== callback)\n      if (nextListeners.length > 0) {\n        this.listeners.set(shortcut.keys, nextListeners)\n      } else {\n        this.listeners.delete(shortcut.keys)\n      }\n    }\n\n    this.shortcuts.delete(shortcutId)\n  }\n\n  /**\n   * Associate a shortcut with a DOM element (for tooltips)\n   */\n  associateElement(element: HTMLElement, shortcut: KeyboardShortcut) {\n    this.elementShortcuts.set(element, shortcut)\n  }\n\n  /**\n   * Remove element association\n   */\n  disassociateElement(element: HTMLElement) {\n    this.elementShortcuts.delete(element)\n  }\n\n  /**\n   * Handle keyboard events\n   */\n  handleKeyEvent = (event: KeyboardEvent) => {\n    const key = this.getEventKey(event)\n    const listeners = this.listeners.get(key)\n\n    if (listeners && listeners.length > 0) {\n      const prioritizedListeners = listeners\n        .map(entry => {\n          const shortcut = this.shortcuts.get(entry.id)\n          return shortcut ? { entry, shortcut } : null\n        })\n        .filter(\n          (item): item is { entry: KeyboardShortcutListenerEntry; shortcut: KeyboardShortcut } => {\n            return Boolean(item?.shortcut) && item!.shortcut.enabled !== false\n          }\n        )\n        .sort((a, b) => {\n          const priorityDiff = (b.shortcut.priority ?? 0) - (a.shortcut.priority ?? 0)\n          if (priorityDiff !== 0) return priorityDiff\n          return a.entry.order - b.entry.order\n        })\n\n      for (const { entry } of prioritizedListeners) {\n        try {\n          entry.callback(event)\n          if (event.defaultPrevented) {\n            break\n          }\n        } catch (error) {\n          console.error(\"Error executing keyboard shortcut:\", error)\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggle tooltip visibility\n   */\n  toggleTooltips(show?: boolean) {\n    this.showTooltips = show !== undefined ? show : !this.showTooltips\n    this.notifyTooltipListeners()\n    return this.showTooltips\n  }\n\n  /**\n   * Get tooltip visibility state\n   */\n  getTooltipVisibility() {\n    return this.showTooltips\n  }\n\n  /**\n   * Subscribe to tooltip visibility changes\n   */\n  onTooltipVisibilityChange(listener: () => void) {\n    this.tooltipListeners.add(listener)\n    return () => this.tooltipListeners.delete(listener)\n  }\n\n  /**\n   * Get all registered shortcuts\n   */\n  getAllShortcuts() {\n    return Array.from(this.shortcuts.values())\n  }\n\n  /**\n   * Get shortcuts for a specific element\n   */\n  getElementShortcut(element: HTMLElement) {\n    return this.elementShortcuts.get(element)\n  }\n\n  /**\n   * Get all element shortcuts\n   */\n  getAllElementShortcuts() {\n    return Array.from(this.elementShortcuts.entries())\n  }\n\n  private notifyTooltipListeners() {\n    this.tooltipListeners.forEach(listener => {\n      try {\n        listener()\n      } catch (error) {\n        console.error(\"Error notifying tooltip listener:\", error)\n      }\n    })\n  }\n\n  private normalizeKeys(keys: string): string {\n    return keys.toLowerCase().split(\"+\").sort().join(\"+\")\n  }\n\n  private getEventKey(event: KeyboardEvent): string {\n    const parts: string[] = []\n\n    if (event.ctrlKey || event.metaKey) parts.push(\"ctrl\")\n    if (event.altKey) parts.push(\"alt\")\n    if (event.shiftKey) parts.push(\"shift\")\n\n    // Handle special keys\n    const key = event.key.toLowerCase()\n    if (key === \" \") {\n      parts.push(\"space\")\n    } else if (key === \"escape\") {\n      parts.push(\"escape\")\n    } else if (key === \"enter\") {\n      parts.push(\"enter\")\n    } else if (key === \"tab\") {\n      parts.push(\"tab\")\n    } else if (key === \"backspace\") {\n      parts.push(\"backspace\")\n    } else if (key === \"delete\") {\n      parts.push(\"delete\")\n    } else if (key.startsWith(\"arrow\")) {\n      parts.push(key.replace(\"arrow\", \"\"))\n    } else if (key.startsWith(\"f\") && /^f\\d+$/.test(key)) {\n      parts.push(key)\n    } else if (key.length === 1) {\n      parts.push(key)\n    }\n\n    return parts.sort().join(\"+\")\n  }\n}\n\n// Global registry instance\nconst globalRegistry = new KeyboardShortcutRegistry()\n\n/**\n * Context for keyboard shortcuts\n */\nexport const KeyboardShortcutContext = React.createContext<{\n  registry: KeyboardShortcutRegistry\n  showTooltips: boolean\n  toggleTooltips: (show?: boolean) => boolean\n}>({\n  registry: globalRegistry,\n  showTooltips: false,\n  toggleTooltips: () => false,\n})\n\n/**\n * Provider component for keyboard shortcuts\n */\nexport function KeyboardShortcutProvider({ children }: { children: React.ReactNode }) {\n  const [showTooltips, setShowTooltips] = React.useState(false)\n\n  React.useEffect(() => {\n    // Set up global event listeners\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Toggle tooltips with Shift+?\n      if (event.shiftKey && event.key === \"?\") {\n        event.preventDefault()\n        const newState = globalRegistry.toggleTooltips()\n        setShowTooltips(newState)\n        return\n      }\n\n      globalRegistry.handleKeyEvent(event)\n    }\n\n    document.addEventListener(\"keydown\", handleKeyDown)\n\n    // Listen for tooltip visibility changes\n    const unsubscribe = globalRegistry.onTooltipVisibilityChange(() => {\n      setShowTooltips(globalRegistry.getTooltipVisibility())\n    })\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n      unsubscribe()\n    }\n  }, [])\n\n  const toggleTooltips = React.useCallback((show?: boolean) => {\n    const newState = globalRegistry.toggleTooltips(show)\n    setShowTooltips(newState)\n    return newState\n  }, [])\n\n  const contextValue = React.useMemo(\n    () => ({\n      registry: globalRegistry,\n      showTooltips,\n      toggleTooltips,\n    }),\n    [showTooltips, toggleTooltips]\n  )\n\n  return (\n    <KeyboardShortcutContext.Provider value={contextValue}>\n      {children}\n    </KeyboardShortcutContext.Provider>\n  )\n}\n\n/**\n * Hook for registering keyboard shortcuts\n *\n * @param shortcut - The keyboard shortcut configuration\n * @param callback - Function to execute when shortcut is triggered\n * @param options - Additional options\n *\n * @example\n * ```tsx\n * function SearchModal() {\n *   const [isOpen, setIsOpen] = useState(false)\n *\n *   useKeyboardShortcut(\n *     {\n *       id: 'open-search',\n *       keys: 'ctrl+k',\n *       description: 'Open search modal',\n *       category: 'Navigation'\n *     },\n *     () => setIsOpen(true)\n *   )\n *\n *   return isOpen ? <Modal>Search content</Modal> : null\n * }\n * ```\n */\nexport function useKeyboardShortcut(\n  shortcut: KeyboardShortcut,\n  callback: (event: KeyboardEvent) => void,\n  options: {\n    enabled?: boolean\n    preventDefault?: boolean\n    stopPropagation?: boolean\n  } = {}\n) {\n  const { registry } = React.useContext(KeyboardShortcutContext)\n  const { enabled = true, preventDefault = true, stopPropagation = false } = options\n\n  const wrappedCallback = React.useCallback(\n    (event: KeyboardEvent) => {\n      if (!enabled) return\n\n      if (preventDefault) {\n        event.preventDefault()\n      }\n      if (stopPropagation) {\n        event.stopPropagation()\n      }\n\n      callback(event)\n    },\n    [callback, enabled, preventDefault, stopPropagation]\n  )\n\n  React.useEffect(() => {\n    if (!enabled) return\n\n    const unregister = registry.register(shortcut, wrappedCallback)\n    return unregister\n  }, [registry, shortcut, wrappedCallback, enabled])\n}\n\n/**\n * Hook for associating keyboard shortcuts with DOM elements (for tooltips)\n *\n * @param shortcut - The keyboard shortcut configuration\n * @param callback - Function to execute when shortcut is triggered\n * @param options - Additional options\n *\n * @example\n * ```tsx\n * function NavigationButton() {\n *   const ref = useKeyboardShortcutElement(\n *     {\n *       id: 'nav-home',\n *       keys: 'g h',\n *       description: 'Go to home page'\n *     },\n *     () => router.push('/'),\n *     { sequence: true }\n *   )\n *\n *   return <button ref={ref}>Home</button>\n * }\n * ```\n */\nexport function useKeyboardShortcutElement<T extends HTMLElement = HTMLElement>(\n  shortcut: KeyboardShortcut,\n  callback: (event: KeyboardEvent) => void,\n  options: {\n    enabled?: boolean\n    preventDefault?: boolean\n    stopPropagation?: boolean\n    sequence?: boolean\n  } = {}\n) {\n  const elementRef = React.useRef<T>(null)\n  const { registry } = React.useContext(KeyboardShortcutContext)\n  const { enabled = true, preventDefault = true, stopPropagation = false } = options\n\n  // Register the shortcut\n  useKeyboardShortcut(shortcut, callback, { enabled, preventDefault, stopPropagation })\n\n  // Associate with element for tooltips\n  React.useEffect(() => {\n    const element = elementRef.current\n    if (!element || !enabled) return\n\n    registry.associateElement(element, shortcut)\n\n    return () => {\n      registry.disassociateElement(element)\n    }\n  }, [registry, shortcut, enabled])\n\n  return elementRef\n}\n\n/**\n * Hook for accessing the keyboard shortcut context\n */\nexport function useKeyboardShortcutContext() {\n  return React.useContext(KeyboardShortcutContext)\n}\n\n/**\n * Hook for managing global shortcuts (help, tooltips, etc.)\n */\nexport function useGlobalKeyboardShortcuts() {\n  const { toggleTooltips, showTooltips } = useKeyboardShortcutContext()\n\n  // Help dialog shortcut\n  useKeyboardShortcut(\n    {\n      id: \"toggle-help\",\n      keys: \"shift+?\",\n      description: \"Toggle keyboard shortcuts help\",\n      category: \"Global\",\n    },\n    () => {\n      toggleTooltips()\n    }\n  )\n\n  return {\n    showTooltips,\n    toggleTooltips,\n  }\n}\n\nexport default useKeyboardShortcut\n"
    }
  ]
}