{
  "name": "use-github-mention",
  "type": "registry:hook",
  "namespace": "@ui-components/hooks",
  "description": "use-github-mention hook",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/use-github-mention.ts",
      "content": "\"use client\"\n\nimport useSWR from \"swr\"\n\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource, ResourceKind } from \"@/lib/github/types\"\n\ntype UseGithubMentionOptions = {\n  useServer?: boolean\n}\n\nexport type UseGithubMentionResult = {\n  kind: ResourceKind\n  data: GithubResource | null\n  isLoading: boolean\n  error: Error | null\n  refetch: () => void\n}\n\nfunction clientEndpointFor(url: string, useServer?: boolean): string | null {\n  const parsed = parseGithubUrl(url)\n  if (parsed.kind === \"unknown\") return null\n\n  if (useServer) {\n    const params = new URLSearchParams({ url })\n    return `/api/github/resource?${params.toString()}`\n  }\n\n  switch (parsed.kind) {\n    case \"pull\":\n      return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/pulls/${parsed.number}`\n    case \"issue\":\n      return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/issues/${parsed.number}`\n    case \"user\":\n      return `https://api.github.com/users/${parsed.username}`\n    case \"repo\":\n      return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}`\n    default:\n      return null\n  }\n}\n\nasync function fetcher(url: string): Promise<GithubResource> {\n  const res = await fetch(url, {\n    headers: { Accept: \"application/vnd.github+json\" },\n    cache: \"force-cache\",\n  })\n  if (!res.ok) {\n    throw new Error(`GitHub request failed: ${res.status}`)\n  }\n  const json = await res.json()\n  return normalizeGithubResource(json)\n}\n\nfunction normalizeGithubResource(data: any): GithubResource {\n  if (typeof data === \"object\" && data != null) {\n    if (\"merged_at\" in data && (\"pull_request\" in data || \"merge_commit_sha\" in data || \"draft\" in data)) {\n      const merged = Boolean(data.merged_at)\n      const draft = Boolean(data.draft)\n      return {\n        kind: \"pull\",\n        id: data.id,\n        number: data.number,\n        state: data.state === \"open\" ? \"open\" : \"closed\",\n        merged,\n        draft,\n        title: data.title,\n        user: {\n          login: data.user?.login,\n          avatar_url: data.user?.avatar_url ?? null,\n          html_url: data.user?.html_url,\n        },\n        created_at: data.created_at,\n        html_url: data.html_url,\n        labels: Array.isArray(data.labels)\n          ? data.labels.map((l: any) => ({ id: l.id, name: l.name, color: l.color }))\n          : undefined,\n        base: data.base,\n      }\n    }\n\n    if (\"title\" in data && \"comments\" in data && \"user\" in data && !(\"merged_at\" in data)) {\n      return {\n        kind: \"issue\",\n        id: data.id,\n        number: data.number,\n        state: data.state === \"open\" ? \"open\" : \"closed\",\n        title: data.title,\n        user: {\n          login: data.user?.login,\n          avatar_url: data.user?.avatar_url ?? null,\n          html_url: data.user?.html_url,\n        },\n        created_at: data.created_at,\n        html_url: data.html_url,\n        comments: data.comments,\n        labels: Array.isArray(data.labels)\n          ? data.labels.map((l: any) => ({ id: l.id, name: l.name, color: l.color }))\n          : undefined,\n      }\n    }\n\n    if (\"login\" in data && (\"followers\" in data || \"type\" in data)) {\n      return {\n        kind: \"user\",\n        id: data.id,\n        login: data.login,\n        name: data.name ?? null,\n        avatar_url: data.avatar_url ?? null,\n        html_url: data.html_url,\n        bio: data.bio ?? null,\n        followers: data.followers,\n        following: data.following,\n        location: data.location ?? null,\n      }\n    }\n\n    if (\"full_name\" in data && \"stargazers_count\" in data) {\n      return {\n        kind: \"repo\",\n        id: data.id,\n        name: data.name,\n        full_name: data.full_name,\n        description: data.description ?? null,\n        html_url: data.html_url,\n        stargazers_count: data.stargazers_count,\n        forks_count: data.forks_count,\n        open_issues_count: data.open_issues_count,\n      }\n    }\n  }\n  throw new Error(\"Unsupported GitHub response shape\")\n}\n\nexport function useGithubMention(url: string, opts: UseGithubMentionOptions = {}): UseGithubMentionResult {\n  const endpoint = clientEndpointFor(url, opts.useServer)\n  const { data, error, isLoading, mutate } = useSWR<GithubResource>(endpoint, endpoint ? fetcher : null, {\n    revalidateOnFocus: false,\n    refreshInterval: 7 * 60 * 1000,\n  })\n\n  const parsed = parseGithubUrl(url)\n  const kind: ResourceKind = parsed.kind\n\n  return {\n    kind,\n    data: data ?? null,\n    isLoading: Boolean(isLoading) && !error,\n    error: error ?? null,\n    refetch: () => mutate(),\n  }\n}\n\n"
    }
  ]
}