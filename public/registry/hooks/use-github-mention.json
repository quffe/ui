{
  "name": "use-github-mention",
  "type": "registry:hook",
  "namespace": "@ui-components/hooks",
  "description": "use-github-mention hook (SWR)",
  "dependencies": ["swr"],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:hook",
      "path": "hooks/use-github-mention.ts",
      "content": "\"use client\"\n\nimport useSWR from \"swr\"\n\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource, ResourceKind } from \"@/lib/github/types\"\n\n// Core fetch + normalization (inlined for portability)\nasync function getGithubResource(url: string): Promise<GithubResource> {\n  const res = await fetch(url, { headers: { Accept: \"application/vnd.github+json\" }, cache: \"force-cache\" })\n  if (!res.ok) throw new Error(`GitHub request failed: ${res.status}`)\n  const json = (await res.json()) as unknown\n  return normalizeGithubResource(json)\n}\n\nfunction normalizeGithubResource(data: unknown): GithubResource {\n  if (typeof data !== \"object\" || data == null) throw new Error(\"Unsupported GitHub response shape\")\n  const obj = data as Record<string, unknown>\n  if (\"merged_at\" in obj || \"draft\" in obj) {\n    const user = obj.user as Record<string, unknown> | undefined\n    return { kind: \"pull\", id: obj.id as number, number: obj.number as number, state: (obj.state as string) === \"open\" ? \"open\" : \"closed\", merged: Boolean(obj.merged_at), draft: Boolean(obj.draft), title: obj.title as string, user: { login: user?.login as string, avatar_url: (user?.avatar_url as string) ?? null, html_url: user?.html_url as string }, created_at: obj.created_at as string, html_url: obj.html_url as string, labels: Array.isArray(obj.labels) ? (obj.labels as unknown[]).map(l => { const o = l as Record<string, unknown>; return { id: o.id as number, name: String(o.name), color: typeof o.color === \"string\" ? o.color : undefined } }) : undefined, base: obj.base as { repo?: { full_name?: string } } }\n  }\n  if (\"title\" in obj && \"comments\" in obj && \"user\" in obj && !(\"merged_at\" in obj)) {\n    const user = obj.user as Record<string, unknown> | undefined\n    return { kind: \"issue\", id: obj.id as number, number: obj.number as number, state: (obj.state as string) === \"open\" ? \"open\" : \"closed\", title: obj.title as string, user: { login: user?.login as string, avatar_url: (user?.avatar_url as string) ?? null, html_url: user?.html_url as string }, created_at: obj.created_at as string, html_url: obj.html_url as string, comments: obj.comments as number, labels: Array.isArray(obj.labels) ? (obj.labels as unknown[]).map(l => { const o = l as Record<string, unknown>; return { id: o.id as number, name: String(o.name), color: typeof o.color === \"string\" ? o.color : undefined } }) : undefined }\n  }\n  if (\"login\" in obj) {\n    return { kind: \"user\", id: obj.id as number, login: obj.login as string, name: (obj.name as string) ?? null, avatar_url: (obj.avatar_url as string) ?? null, html_url: obj.html_url as string, bio: (obj.bio as string) ?? null, followers: obj.followers as number, following: obj.following as number, location: (obj.location as string) ?? null }\n  }\n  if (\"full_name\" in obj) {\n    return { kind: \"repo\", id: obj.id as number, name: obj.name as string, full_name: obj.full_name as string, description: (obj.description as string) ?? null, html_url: obj.html_url as string, stargazers_count: obj.stargazers_count as number, forks_count: obj.forks_count as number, open_issues_count: obj.open_issues_count as number }\n  }\n  throw new Error(\"Unsupported GitHub response shape\")\n}\n\nfunction clientEndpointFor(url: string, useServer?: boolean): string | null {\n  const parsed = parseGithubUrl(url)\n  if (parsed.kind === \"unknown\") return null\n  if (useServer) { const params = new URLSearchParams({ url }); return `/api/github/resource?${params.toString()}` }\n  switch (parsed.kind) {\n    case \"pull\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/pulls/${parsed.number}`\n    case \"issue\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/issues/${parsed.number}`\n    case \"user\": return `https://api.github.com/users/${parsed.username}`\n    case \"repo\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}`\n    default: return null\n  }\n}\n\nexport type UseGithubMentionOptions = {\n  useServer?: boolean\n  refreshInterval?: number\n  revalidateOnFocus?: boolean\n  suspense?: boolean\n}\n\nexport type UseGithubMentionResult = {\n  kind: ResourceKind\n  data: GithubResource | null\n  isLoading: boolean\n  error: Error | null\n  refetch: () => void\n  invalidReason?: \"EMPTY_URL\" | \"INVALID_GITHUB_URL\"\n}\n\nexport function useGithubMention(url: string, opts: UseGithubMentionOptions = {}): UseGithubMentionResult {\n  const trimmed = (url ?? \"\").trim()\n  const invalidReason = !trimmed ? \"EMPTY_URL\" : parseGithubUrl(trimmed).kind === \"unknown\" ? \"INVALID_GITHUB_URL\" : undefined\n  const endpoint = invalidReason ? null : clientEndpointFor(trimmed, opts.useServer)\n  const { data, error, isLoading, mutate } = useSWR<GithubResource>(endpoint, endpoint ? (u) => getGithubResource(u) : null, { revalidateOnFocus: opts.revalidateOnFocus ?? false, refreshInterval: opts.refreshInterval ?? 420000, suspense: opts.suspense })\n  const kind: ResourceKind = parseGithubUrl(trimmed).kind\n  return { kind, data: data ?? null, isLoading: Boolean(isLoading) && !error, error: error ?? null, refetch: () => mutate(), invalidReason }\n}\n"
    }
  ]
}
