{
  "name": "github-issue-replica",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@quffeui/replica",
  "description": "Standalone GitHub issue view with tooltip metadata",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/views/issue-replica.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { ComponentProps } from \"react\"\nimport Link from \"next/link\"\nimport { CircleDot, CircleCheck } from \"lucide-react\"\n\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype GithubIssueResource = {\n  kind: \"issue\"\n  number: number\n  title: string\n  html_url: string\n  state: \"open\" | \"closed\"\n  created_at: string\n  body?: string | null\n  comments?: number | null\n}\n\nfunction cn(...classes: (string | null | undefined | false)[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n\nexport type GithubIssueReplicaProps = {\n  data: GithubIssueResource\n  className?: string\n  linkProps?: ComponentProps<\"a\">\n}\n\nexport function GithubIssueReplica({ data, className, linkProps }: GithubIssueReplicaProps) {\n  const content = (\n    <div className={cn(\"inline-flex items-baseline gap-2\", className)}>\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {getIssueStatusMeta(data.state).icon}\n      </span>\n      <Link\n        href={data.html_url}\n        className=\"hover:underline text-sm\"\n        aria-label={`Open issue #${data.number} in ${repoFromUrl(data.html_url)}`}\n        {...linkProps}\n      >\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\">\n          {\" \"}\n          {repoFromUrl(data.html_url)}#{data.number}\n        </span>\n      </Link>\n    </div>\n  )\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{content}</TooltipTrigger>\n      <TooltipContent\n        sideOffset={12}\n        align=\"start\"\n        className=\"grid min-w-sm max-w-lg gap-3 text-sm border border-border bg-popover p-5 text-popover-foreground shadow-lg\"\n      >\n        <div className=\"flex items-baseline gap-1 text-muted-foreground\">\n          <Link\n            href={`https://github.com/${repoFromUrl(data.html_url)}`}\n            className=\"truncate text-xs font-medium hover:text-blue-500 underline\"\n          >\n            {repoFromUrl(data.html_url)}\n          </Link>\n          {formatOnDate(data.created_at) ? (\n            <span className=\"whitespace-nowrap text-xs\">{formatOnDate(data.created_at)}</span>\n          ) : null}\n        </div>\n\n        <div className=\"flex items-start gap-2\">\n          <span className=\"mt-0.5\" aria-hidden>\n            {React.cloneElement(getIssueStatusMeta(data.state).icon, {\n              className: cn(\"size-5\", getIssueStatusMeta(data.state).icon.props?.className ?? \"\"),\n            })}\n          </span>\n          <div className=\"flex flex-col gap-3\">\n            <div className=\"min-w-0 space-y-1\">\n              <Link\n                href={data.html_url}\n                className=\"block font-semibold leading-snug text-white hover:text-blue-500\"\n              >\n                {data.title}\n                <span className=\"font-normal text-muted-foreground\"> #{data.number}</span>\n              </Link>\n            </div>\n\n            {renderBodySnippet(data.body ?? null, repoFromUrl(data.html_url))}\n\n            {typeof data.comments === \"number\" ? (\n              <div className=\"text-xs text-muted-foreground\">\n                {formatNumber(data.comments)} comment{data.comments === 1 ? \"\" : \"s\"}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nfunction renderBodySnippet(body: string | null, repo: string | null): React.ReactNode {\n  if (!body) return null\n  const stripped = stripMarkdown(body)\n  if (!stripped) return null\n  const snippet = truncateSnippet(stripped, 180)\n  const parts = linkifyIssueReferences(snippet, repo)\n  return <p className=\"whitespace-pre-wrap text-sm leading-snug text-[#8b949e]\">{parts}</p>\n}\n\nfunction stripMarkdown(input: string) {\n  return input\n    .replace(/\\r\\n/g, \"\\n\")\n    .replace(/```[\\s\\S]*?```/g, \" \")\n    .replace(/`([^`]+)`/g, \"$1\")\n    .replace(/!\\[[^\\]]*\\]\\([^\\)]*\\)/g, \"\")\n    .replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, \"$1\")\n    .replace(/[*_~]{1,3}([^*_~]+)[*_~]{1,3}/g, \"$1\")\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/[ \\t\\f\\v]+/g, \" \")\n    .replace(/^[ \\t]+|[ \\t]+$/gm, \"\")\n    .replace(/\\n{3,}/g, \"\\n\\n\")\n    .trim()\n}\n\nfunction truncateSnippet(input: string, maxLength: number) {\n  if (input.length <= maxLength) return input\n  return `${input.slice(0, maxLength).trimEnd()}â€¦`\n}\n\nfunction linkifyIssueReferences(snippet: string, repo: string | null): React.ReactNode[] {\n  const regex = /#(\\d+)/g\n  const nodes: React.ReactNode[] = []\n  let lastIndex = 0\n\n  for (const match of snippet.matchAll(regex)) {\n    const ref = match[0]\n    const number = match[1]\n    const index = match.index ?? 0\n    if (index > lastIndex) nodes.push(snippet.slice(lastIndex, index))\n    if (repo) {\n      nodes.push(\n        <Link\n          key={`${repo}-${number}-${index}`}\n          href={`https://github.com/${repo}/pull/${number}`}\n          className=\"text-[#58a6ff] hover:underline\"\n        >\n          {ref}\n        </Link>\n      )\n    } else {\n      nodes.push(ref)\n    }\n    lastIndex = index + ref.length\n  }\n\n  if (lastIndex < snippet.length) nodes.push(snippet.slice(lastIndex))\n\n  return nodes\n}\n\nfunction repoFromUrl(htmlUrl: string): string {\n  try {\n    const u = new URL(htmlUrl)\n    const p = u.pathname.split(\"/\").filter(Boolean)\n    if (p.length >= 2) return `${p[0]}/${p[1]}`\n    return htmlUrl\n  } catch {\n    return htmlUrl\n  }\n}\n\nfunction formatOnDate(input?: string | null) {\n  if (!input) return null\n  const date = new Date(input)\n  if (Number.isNaN(date.getTime())) return null\n  const now = new Date()\n  const options: Intl.DateTimeFormatOptions = { month: \"short\", day: \"numeric\" }\n  if (date.getFullYear() !== now.getFullYear()) options.year = \"numeric\"\n  return `on ${date.toLocaleDateString(undefined, options)}`\n}\n\nfunction formatNumber(value: number) {\n  return new Intl.NumberFormat(undefined, {\n    notation: value >= 1000 ? \"compact\" : \"standard\",\n    maximumFractionDigits: 1,\n  }).format(value)\n}\n\nfunction getIssueStatusMeta(status: \"open\" | \"closed\") {\n  const base = \"inline-flex items-center gap-1 rounded-full text-white\"\n  const iconClass = \"size-4 align-text-bottom\"\n  if (status === \"open\")\n    return {\n      label: \"Open\",\n      className: `${base}`,\n      icon: <CircleDot className={iconClass} style={{ color: \"#1f883d\" }} />,\n    }\n  return {\n    label: \"Closed\",\n    className: `${base}`,\n    icon: <CircleCheck className={iconClass} style={{ color: \"#8250df\" }} />,\n  }\n}\n"
    }
  ]
}