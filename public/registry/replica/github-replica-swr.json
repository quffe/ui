{
  "name": "github-replica-swr",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@ui-components/replica",
  "description": "GitHub Replica component bundled with SWR hook",
  "dependencies": ["swr"],
  "registryDependencies": [
    "card",
    "badge",
    "avatar",
    "tooltip",
    "separator",
    "skeleton",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/GithubReplica.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport Link from \"next/link\"\n\nimport { useGithubReplica } from \"@/hooks/use-github-replica\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource } from \"@/lib/github/types\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype GithubReplicaProps = {\n  url: string\n  useServer?: boolean\n  className?: string\n}\n\nexport function GithubReplica({ url, useServer, className }: GithubReplicaProps) {\n  const { data, isLoading, error, refetch } = useGithubReplica(url, { useServer })\n\n  if (isLoading) return <GithubReplicaSkeleton className={className} />\n  if (error || !data) return <GithubReplicaError url={url} onRetry={refetch} className={className} />\n\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex items-start gap-4\">\n        {renderContent(data)}\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GithubReplicaSkeleton({ className }: { className?: string }) {\n  return (\n    <Card className={className}>\n      <CardContent className=\"flex items-start gap-4\">\n        <Skeleton className=\"size-8 rounded-full\" />\n        <div className=\"flex-1 space-y-2\">\n          <Skeleton className=\"h-4 w-1/2\" />\n          <Skeleton className=\"h-3 w-1/3\" />\n          <Skeleton className=\"h-3 w-2/3\" />\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction GithubReplicaError({ url, onRetry, className }: { url: string; onRetry: () => void; className?: string }) {\n  const parsed = parseGithubUrl(url)\n  return (\n    <Card aria-live=\"polite\" className={className}>\n      <CardContent className=\"flex items-center justify-between gap-4\">\n        <div className=\"min-w-0\">\n          <p className=\"text-sm font-medium\">Could not load GitHub resource</p>\n          <p className=\"text-muted-foreground text-xs truncate\">{parsed.kind !== \"unknown\" ? url : \"Invalid GitHub URL\"}</p>\n        </div>\n        <Button size=\"sm\" onClick={onRetry} aria-label=\"Retry loading GitHub data\">\n          Retry\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction renderContent(data: GithubResource) {\n  switch (data.kind) {\n    case \"pull\":\n      return <PullContent data={data} />\n    case \"issue\":\n      return <IssueContent data={data} />\n    case \"user\":\n      return <UserContent data={data} />\n    case \"repo\":\n      return <RepoContent data={data} />\n    default:\n      return <p className=\"text-sm\">Unsupported GitHub URL</p>\n  }\n}\n\nfunction PullContent({ data }: { data: Extract<GithubResource, { kind: \"pull\" }> }) {\n  const status = data.merged ? \"merged\" : data.draft ? \"draft\" : data.state\n  const statusVariant = data.merged ? \"secondary\" : data.state === \"open\" ? \"default\" : \"outline\"\n  const created = new Date(data.created_at).toLocaleDateString(undefined, { year: \"numeric\", month: \"short\", day: \"numeric\" })\n  const labels = (data.labels ?? []).slice(0, 3)\n  const extra = (data.labels?.length ?? 0) - labels.length\n\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar>\n        <AvatarImage src={data.user.avatar_url ?? undefined} alt={`${data.user.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.user.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={statusVariant as any} aria-label={`PR status: ${status}`}>{statusLabel(status)}</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            #{data.number} {data.title}\n          </Link>\n        </div>\n        <div className=\"text-muted-foreground mt-1 flex items-center gap-2 text-xs\">\n          <span>\n            by <Link href={data.user.html_url} className=\"hover:underline\">{data.user.login}</Link>\n          </span>\n          <Separator className=\"mx-1 h-3 w-px\" />\n          <span>opened {created}</span>\n          {data.base?.repo?.full_name ? (\n            <>\n              <Separator className=\"mx-1 h-3 w-px\" />\n              <span>in <Link href={`https://github.com/${data.base?.repo?.full_name}`} className=\"hover:underline\">{data.base?.repo?.full_name}</Link></span>\n            </>\n          ) : null}\n        </div>\n        {!!labels.length && (\n          <div className=\"mt-2 flex flex-wrap gap-1\">\n            {labels.map(l => (\n              <Badge key={l.id} variant=\"outline\" className=\"text-xs\">{l.name}</Badge>\n            ))}\n            {extra > 0 ? <Badge variant=\"outline\" className=\"text-xs\">+{extra}</Badge> : null}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction IssueContent({ data }: { data: Extract<GithubResource, { kind: \"issue\" }> }) {\n  const created = new Date(data.created_at).toLocaleDateString(undefined, { year: \"numeric\", month: \"short\", day: \"numeric\" })\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar>\n        <AvatarImage src={data.user.avatar_url ?? undefined} alt={`${data.user.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.user.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\">Issue</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            #{data.number} {data.title}\n          </Link>\n        </div>\n        <div className=\"text-muted-foreground mt-1 text-xs\">opened {created}</div>\n      </div>\n    </div>\n  )\n}\n\nfunction UserContent({ data }: { data: Extract<GithubResource, { kind: \"user\" }> }) {\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <Avatar>\n        <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\">User</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            {data.name ?? data.login}\n          </Link>\n        </div>\n        <div className=\"text-muted-foreground mt-1 text-xs\">@{data.login}</div>\n      </div>\n    </div>\n  )\n}\n\nfunction RepoContent({ data }: { data: Extract<GithubResource, { kind: \"repo\" }> }) {\n  return (\n    <div className=\"flex w-full items-start gap-3\">\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\">Repository</Badge>\n          <Link href={data.html_url} className=\"hover:underline focus:outline-none focus-visible:ring-2 focus-visible:ring-ring rounded-sm text-sm font-medium\">\n            {data.full_name}\n          </Link>\n        </div>\n        {data.description ? (\n          <div className=\"text-muted-foreground mt-1 text-xs\">{data.description}</div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nfunction statusLabel(status: string) {\n  switch (status) {\n    case \"open\":\n      return \"Open\"\n    case \"closed\":\n      return \"Closed\"\n    case \"merged\":\n      return \"Merged\"\n    case \"draft\":\n      return \"Draft\"\n    default:\n      return status\n  }\n}\n\nexport default GithubReplica\n"
    },
    {
      "type": "registry:hook",
      "path": "hooks/use-github-replica.ts",
      "content": "\"use client\"\n\nimport useSWR from \"swr\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource, ResourceKind } from \"@/lib/github/types\"\n\nexport type UseGithubReplicaOptions = { useServer?: boolean }\nexport type UseGithubReplicaResult = { kind: ResourceKind; data: GithubResource | null; isLoading: boolean; error: Error | null; refetch: () => void }\n\nfunction clientEndpointFor(url: string, useServer?: boolean): string | null {\n  const parsed = parseGithubUrl(url)\n  if (parsed.kind === \"unknown\") return null\n  if (useServer) { const params = new URLSearchParams({ url }); return `/api/github/resource?${params.toString()}` }\n  switch (parsed.kind) {\n    case \"pull\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/pulls/${parsed.number}`\n    case \"issue\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}/issues/${parsed.number}`\n    case \"user\": return `https://api.github.com/users/${parsed.username}`\n    case \"repo\": return `https://api.github.com/repos/${parsed.owner}/${parsed.repo}`\n    default: return null\n  }\n}\n\nasync function fetcher(url: string): Promise<GithubResource> {\n  const res = await fetch(url, { headers: { Accept: \"application/vnd.github+json\" }, cache: \"force-cache\" })\n  if (!res.ok) throw new Error(`GitHub request failed: ${res.status}`)\n  const json = (await res.json()) as unknown\n  return normalizeGithubResource(json)\n}\n\nfunction normalizeGithubResource(data: unknown): GithubResource {\n  if (typeof data !== \"object\" || data == null) throw new Error(\"Unsupported GitHub response shape\")\n  const obj = data as Record<string, unknown>\n  if (\"merged_at\" in obj || \"draft\" in obj) {\n    const user = obj.user as Record<string, unknown> | undefined\n    return { kind: \"pull\", id: obj.id as number, number: obj.number as number, state: (obj.state as string) === \"open\" ? \"open\" : \"closed\", merged: Boolean(obj.merged_at), draft: Boolean(obj.draft), title: obj.title as string, user: { login: user?.login as string, avatar_url: (user?.avatar_url as string) ?? null, html_url: user?.html_url as string }, created_at: obj.created_at as string, html_url: obj.html_url as string }\n  }\n  if (\"title\" in obj && \"comments\" in obj && \"user\" in obj && !(\"merged_at\" in obj)) {\n    const user = obj.user as Record<string, unknown> | undefined\n    return { kind: \"issue\", id: obj.id as number, number: obj.number as number, state: (obj.state as string) === \"open\" ? \"open\" : \"closed\", title: obj.title as string, user: { login: user?.login as string, avatar_url: (user?.avatar_url as string) ?? null, html_url: user?.html_url as string }, created_at: obj.created_at as string, html_url: obj.html_url as string, comments: obj.comments as number }\n  }\n  if (\"login\" in obj) {\n    return { kind: \"user\", id: obj.id as number, login: obj.login as string, name: (obj.name as string) ?? null, avatar_url: (obj.avatar_url as string) ?? null, html_url: obj.html_url as string }\n  }\n  if (\"full_name\" in obj) {\n    return { kind: \"repo\", id: obj.id as number, name: obj.name as string, full_name: obj.full_name as string, description: (obj.description as string) ?? null, html_url: obj.html_url as string }\n  }\n  throw new Error(\"Unsupported GitHub response shape\")\n}\n\nexport function useGithubReplica(url: string, opts: UseGithubReplicaOptions = {}): UseGithubReplicaResult {\n  const endpoint = clientEndpointFor(url, opts.useServer)\n  const { data, error, isLoading, mutate } = useSWR<GithubResource>(endpoint, endpoint ? fetcher : null, { revalidateOnFocus: false, refreshInterval: 420000 })\n  const kind: ResourceKind = parseGithubUrl(url).kind\n  return { kind, data: data ?? null, isLoading: Boolean(isLoading) && !error, error: error ?? null, refetch: () => mutate() }\n}\n"
    }
  ]
}

