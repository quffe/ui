{
  "name": "github-repo-replica",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@quffeui/replica",
  "description": "Standalone GitHub repository view with owner preview",
  "dependencies": [],
  "registryDependencies": [
    "avatar",
    "badge",
    "tooltip"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/views/repo-replica.tsx",
      "content": "\"use client\"\n\nimport Link from \"next/link\"\nimport type { ComponentProps } from \"react\"\nimport { Book, GitFork, Star, MapPin, Users, UserPlus } from \"lucide-react\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype GithubRepoResource = {\n  kind: \"repo\"\n  id: number\n  full_name: string\n  description?: string | null\n  html_url: string\n  visibility?: string | null\n  private?: boolean\n  language?: string | null\n  languageColor?: string | null\n  stargazers_count?: number | null\n  forks_count?: number | null\n  pushed_at?: string | null\n  updated_at?: string | null\n  owner?: {\n    id?: number\n    login: string\n    avatar_url?: string | null\n    html_url: string\n    name?: string | null\n    bio?: string | null\n    followers?: number | null\n    following?: number | null\n    location?: string | null\n  } | null\n}\n\ntype GithubUserResource = {\n  kind: \"user\"\n  id: number\n  login: string\n  name?: string | null\n  avatar_url?: string | null\n  html_url: string\n  bio?: string | null\n  followers?: number | null\n  following?: number | null\n  location?: string | null\n}\n\nfunction cn(...classes: (string | null | undefined | false)[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n\nexport type GithubRepoReplicaProps = {\n  data: GithubRepoResource\n  className?: string\n  linkProps?: ComponentProps<\"a\">\n}\n\nexport function GithubRepoReplica({ data, className, linkProps }: GithubRepoReplicaProps) {\n  const ownerUser = data.owner\n    ? {\n        id: data.owner.id,\n        login: data.owner.login,\n        html_url: data.owner.html_url,\n        avatar_url: data.owner.avatar_url,\n      }\n    : null\n\n  const content = (\n    <div className={cn(\"inline-flex items-center gap-2\", className)}>\n      {ownerUser ? (\n        <UserHoverLink\n          user={ownerUser}\n          ariaLabel={`Open GitHub profile for ${ownerUser.login}`}\n          className=\"inline-flex\"\n        >\n          <Avatar className=\"size-4\">\n            <AvatarImage\n              src={ownerUser.avatar_url ?? undefined}\n              alt={`${ownerUser.login} avatar`}\n            />\n            <AvatarFallback aria-hidden>{ownerUser.login.slice(0, 2).toUpperCase()}</AvatarFallback>\n          </Avatar>\n        </UserHoverLink>\n      ) : null}\n      <Link\n        href={data.html_url}\n        className=\"hover:underline text-sm\"\n        aria-label={`Open repository ${data.full_name}`}\n        {...linkProps}\n      >\n        <bdi className=\"font-medium\">{data.full_name}</bdi>\n      </Link>\n    </div>\n  )\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{content}</TooltipTrigger>\n      <TooltipContent\n        sideOffset={12}\n        align=\"start\"\n        className=\"flex min-w-[220px] max-w-sm flex-col gap-3.5 text-sm border border-border bg-popover p-5 text-popover-foreground shadow-lg\"\n      >\n        <div className=\"flex items-center gap-2\">\n          <Book className=\"size-4 text-muted-foreground\" />\n          <Link\n            href={data.html_url}\n            className=\"font-semibold text-foreground leading-snug hover:text-blue-500\"\n          >\n            {data.full_name}\n          </Link>\n          {getRepoVisibilityLabel(data) ? (\n            <Badge\n              variant=\"outline\"\n              className=\"text-muted-foreground border-muted-foreground/40 rounded-3xl\"\n            >\n              {getRepoVisibilityLabel(data)}\n            </Badge>\n          ) : null}\n        </div>\n\n        {data.description ? (\n          <p className=\"text-sm leading-snug text-muted-foreground ml-0.5\">{data.description}</p>\n        ) : null}\n\n        <div className=\"flex flex-wrap items-center gap-2 text-xs text-muted-foreground\">\n          {renderLanguageBadge(data)}\n          {typeof data.stargazers_count === \"number\" ? (\n            <span className=\"inline-flex items-center gap-1\">\n              <Star className=\"size-3\" />\n              {formatNumber(data.stargazers_count)}\n            </span>\n          ) : null}\n          {typeof data.forks_count === \"number\" ? (\n            <span className=\"inline-flex items-center gap-1\">\n              <GitFork className=\"size-3\" />\n              {formatNumber(data.forks_count)}\n            </span>\n          ) : null}\n          {formatRelativeTime(data.pushed_at ?? data.updated_at) ? (\n            <span>Updated {formatRelativeTime(data.pushed_at ?? data.updated_at)}</span>\n          ) : null}\n        </div>\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\ntype MinimalUser = {\n  id?: number\n  login: string\n  html_url: string\n  avatar_url?: string | null\n  name?: string | null\n  bio?: string | null\n  followers?: number\n  following?: number\n  location?: string | null\n}\n\nfunction UserHoverLink({\n  user,\n  className,\n  ariaLabel,\n  children,\n}: {\n  user: MinimalUser\n  className?: string\n  ariaLabel?: string\n  children?: React.ReactNode\n}) {\n  const label = ariaLabel ?? `Open ${user.login} on GitHub`\n  const content = children ?? user.login\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Link href={user.html_url} className={className} aria-label={label}>\n          {content}\n        </Link>\n      </TooltipTrigger>\n      <TooltipContent\n        sideOffset={8}\n        align=\"start\"\n        className=\"max-w-sm border border-border bg-popover p-2.5 text-popover-foreground shadow-lg\"\n      >\n        <UserTooltip\n          data={{\n            kind: \"user\",\n            id: user.id ?? 0,\n            login: user.login,\n            name: user.name ?? null,\n            avatar_url: user.avatar_url ?? null,\n            html_url: user.html_url,\n            bio: user.bio ?? null,\n            followers: user.followers,\n            following: user.following,\n            location: user.location ?? null,\n          }}\n        />\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nfunction UserTooltip({ data }: { data: GithubUserResource }) {\n  return (\n    <div className=\"flex min-w-[260px] max-w-sm flex-col gap-4\">\n      <div className=\"flex items-center gap-3\">\n        <Avatar className=\"size-12\">\n          <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n          <AvatarFallback>{data.login.slice(0, 2).toUpperCase()}</AvatarFallback>\n        </Avatar>\n        <div className=\"space-y-1\">\n          <Link href={data.html_url} className=\"text-lg font-semibold hover:underline\">\n            {data.name ?? data.login}\n          </Link>\n          <p className=\"text-sm text-muted-foreground\">@{data.login}</p>\n        </div>\n      </div>\n\n      {data.bio ? <p className=\"text-sm text-muted-foreground\">{data.bio}</p> : null}\n\n      <div className=\"flex flex-wrap items-center gap-4 text-xs text-muted-foreground\">\n        {typeof data.followers === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <Users className=\"size-3\" />\n            {formatNumber(data.followers)} followers\n          </span>\n        ) : null}\n        {typeof data.following === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <UserPlus className=\"size-3\" />\n            {formatNumber(data.following)} following\n          </span>\n        ) : null}\n        {data.location ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <MapPin className=\"size-3\" />\n            {data.location}\n          </span>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nfunction renderLanguageBadge(data: GithubRepoResource) {\n  const primaryLanguage = typeof data.language === \"string\" ? data.language : null\n  const languageColor =\n    typeof data.languageColor === \"string\" && data.languageColor.trim() ? data.languageColor : null\n\n  if (!primaryLanguage) return null\n\n  return (\n    <span className=\"inline-flex items-center gap-1\">\n      <div\n        className={cn(\n          \"rounded-full size-3 border border-border/40\",\n          languageColor ? \"\" : \"bg-accent\"\n        )}\n        style={\n          languageColor ? { backgroundColor: languageColor, borderColor: languageColor } : undefined\n        }\n        aria-hidden\n      />\n      {primaryLanguage}\n    </span>\n  )\n}\n\nfunction getRepoVisibilityLabel(data: GithubRepoResource) {\n  if (typeof data.visibility === \"string\" && data.visibility.trim()) {\n    return toTitleCase(data.visibility)\n  }\n  if (typeof data.private === \"boolean\") {\n    return data.private ? \"Private\" : \"Public\"\n  }\n  return null\n}\n\nfunction toTitleCase(input: string) {\n  const normalized = input.replace(/[-_]+/g, \" \").trim()\n  if (!normalized) return input\n  return normalized\n    .split(\" \")\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(\" \")\n}\n\nfunction formatRelativeTime(input?: string | null) {\n  if (!input) return null\n  const date = new Date(input)\n  if (Number.isNaN(date.getTime())) return null\n\n  const now = Date.now()\n  const diffSeconds = Math.round((date.getTime() - now) / 1000)\n  if (diffSeconds === 0) return \"just now\"\n\n  const formatter = new Intl.RelativeTimeFormat(undefined, { numeric: \"auto\" })\n  const divisions: { amount: number; unit: Intl.RelativeTimeFormatUnit }[] = [\n    { amount: 60, unit: \"second\" },\n    { amount: 60, unit: \"minute\" },\n    { amount: 24, unit: \"hour\" },\n    { amount: 7, unit: \"day\" },\n    { amount: 4.34524, unit: \"week\" },\n    { amount: 12, unit: \"month\" },\n    { amount: Number.POSITIVE_INFINITY, unit: \"year\" },\n  ]\n\n  let duration = diffSeconds\n  for (const division of divisions) {\n    if (Math.abs(duration) < division.amount) {\n      return formatter.format(Math.round(duration), division.unit)\n    }\n    duration /= division.amount\n  }\n\n  return null\n}\n\nfunction formatNumber(value: number) {\n  return new Intl.NumberFormat(undefined, {\n    notation: value >= 1000 ? \"compact\" : \"standard\",\n    maximumFractionDigits: 1,\n  }).format(value)\n}\n"
    }
  ]
}
