{
  "name": "github-pull-replica",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@quffeui/replica",
  "description": "Standalone GitHub pull request view with branch context",
  "dependencies": [],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/views/pull-replica.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { ComponentProps } from \"react\"\nimport Link from \"next/link\"\nimport { GitPullRequest, GitMerge } from \"lucide-react\"\n\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ntype GithubPullResource = {\n  kind: \"pull\"\n  number: number\n  title: string\n  html_url: string\n  state: \"open\" | \"closed\"\n  merged?: boolean\n  draft?: boolean\n  body?: string | null\n  updated_at?: string | null\n  created_at: string\n  base?: { repo?: { full_name?: string | null }; ref?: string | null }\n  head?: { repo?: { full_name?: string | null }; ref?: string | null }\n  user: { login: string }\n}\n\nfunction cn(...classes: (string | null | undefined | false)[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n\nexport type GithubPullReplicaProps = {\n  data: GithubPullResource\n  className?: string\n  linkProps?: ComponentProps<\"a\">\n}\n\nexport function GithubPullReplica({ data, className, linkProps }: GithubPullReplicaProps) {\n  const repo = data.base?.repo?.full_name ?? repoFromUrl(data.html_url)\n  const content = (\n    <div className={cn(\"inline-flex items-baseline gap-2\", className)}>\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {getPullStatusMeta(data.merged ? \"merged\" : data.draft ? \"draft\" : data.state).icon}\n      </span>\n      <Link\n        href={data.html_url}\n        className=\"hover:underline text-sm\"\n        aria-label={`Open PR #${data.number} in ${repo}`}\n        {...linkProps}\n      >\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\">\n          {\" \"}\n          {repo}#{data.number}\n        </span>\n      </Link>\n    </div>\n  )\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{content}</TooltipTrigger>\n      <TooltipContent\n        sideOffset={12}\n        align=\"start\"\n        className=\"max-w-lg border border-border bg-popover p-5 text-popover-foreground shadow-lg\"\n      >\n        <PullTooltip data={data} />\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nfunction PullTooltip({ data }: { data: GithubPullResource }) {\n  const repo = data.base?.repo?.full_name ?? repoFromUrl(data.html_url)\n  const createdLabel = formatOnDate(data.updated_at ?? data.created_at)\n  const description = renderBodySnippet(data.body ?? null, repo)\n  const baseRepo = data.base?.repo?.full_name ?? repo\n  const repoNameSegment = repo?.split(\"/\")?.[1]\n  const headRepo =\n    data.head?.repo?.full_name ??\n    (data.user.login && repoNameSegment ? `${data.user.login}/${repoNameSegment}` : null)\n\n  const baseLabelFull = getRepoBranchLabel(baseRepo, data.base?.ref ?? null)\n  const headLabelFull = getRepoBranchLabel(headRepo, data.head?.ref ?? null)\n  const baseLabel = formatRepoBranchLabel(baseRepo, data.base?.ref ?? null)\n  const headLabel = formatRepoBranchLabel(headRepo, data.head?.ref ?? null)\n  const statusMeta = getPullStatusMeta(data.merged ? \"merged\" : data.draft ? \"draft\" : data.state)\n  const originalStatusClass =\n    typeof statusMeta.icon.props?.className === \"string\" ? statusMeta.icon.props.className : \"\"\n  const cleanedStatusClass = originalStatusClass\n    .split(\" \")\n    .filter(cls => cls && !/^size-/.test(cls))\n    .join(\" \")\n  const statusIcon = React.cloneElement(statusMeta.icon, {\n    className: cn(\"mt-0.5 size-5 shrink-0\", cleanedStatusClass),\n    \"aria-hidden\": true,\n  })\n  const [baseOwner, ...baseBranchParts] = baseLabel?.split(\":\") ?? []\n  const baseBranch = baseBranchParts.length ? baseBranchParts.join(\":\") : null\n  const [headOwner, ...headBranchParts] = headLabel?.split(\":\") ?? []\n  const headBranch = headBranchParts.length ? headBranchParts.join(\":\") : null\n\n  return (\n    <div className=\"grid min-w-sm max-w-lg gap-3 text-sm text-foreground\">\n      <div className=\"flex items-baseline gap-1 text-muted-foreground\">\n        <Link\n          href={`https://github.com/${repo}`}\n          className=\"truncate text-xs font-medium hover:text-blue-500 underline\"\n        >\n          {repo}\n        </Link>\n        {createdLabel ? <span className=\"whitespace-nowrap text-xs\">{createdLabel}</span> : null}\n      </div>\n\n      <div className=\"flex items-start gap-2\">\n        {statusIcon}\n        <div className=\"flex flex-col gap-3\">\n          <div className=\"min-w-0 space-y-1\">\n            <Link\n              href={data.html_url}\n              className=\"block font-semibold group leading-snug text-white hover:text-blue-500\"\n            >\n              {data.title}\n              <span className=\"font-normal text-muted-foreground group-hover:text-blue-500\">\n                {\" \"}\n                #{data.number}\n              </span>\n            </Link>\n          </div>\n\n          {description}\n\n          {baseLabel || headLabel ? (\n            <div className=\"flex flex-wrap items-center gap-2 text-xs font-mono\">\n              {baseLabel ? (\n                <BranchLabelBadge\n                  owner={baseOwner || null}\n                  branch={baseBranch || null}\n                  label={baseLabel}\n                  fullLabel={baseLabelFull}\n                />\n              ) : null}\n              {baseLabel && headLabel ? (\n                <span className=\"text-[#8b949e]\" aria-hidden>\n                  \u2190\n                </span>\n              ) : null}\n              {headLabel ? (\n                <BranchLabelBadge\n                  owner={headOwner || null}\n                  branch={headBranch || null}\n                  label={headLabel}\n                  fullLabel={headLabelFull}\n                />\n              ) : null}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction BranchLabelBadge({\n  owner,\n  branch,\n  label,\n  fullLabel,\n}: {\n  owner: string | null\n  branch: string | null\n  label: string\n  fullLabel: string | null\n}) {\n  const href = branch ? getBranchUrl(owner, branch) : null\n  if (!href)\n    return <span className=\"rounded-full border border-border px-2 py-0.5 text-xs\">{label}</span>\n\n  return (\n    <Link\n      href={href}\n      className=\"rounded-full border border-border px-2 py-0.5 text-xs hover:border-blue-500 hover:text-blue-500\"\n      aria-label={fullLabel ?? undefined}\n    >\n      {label}\n    </Link>\n  )\n}\n\nfunction renderBodySnippet(body: string | null, repo: string | null): React.ReactNode {\n  if (!body) return null\n  const stripped = stripMarkdown(body)\n  if (!stripped) return null\n  const snippet = truncateSnippet(stripped, 180)\n  const parts = linkifyIssueReferences(snippet, repo)\n  return <p className=\"whitespace-pre-wrap text-sm leading-snug text-[#8b949e]\">{parts}</p>\n}\n\nfunction stripMarkdown(input: string) {\n  return input\n    .replace(/\\r\\n/g, \"\\n\")\n    .replace(/```[\\s\\S]*?```/g, \" \")\n    .replace(/`([^`]+)`/g, \"$1\")\n    .replace(/!\\[[^\\]]*\\]\\([^\\)]*\\)/g, \"\")\n    .replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, \"$1\")\n    .replace(/[*_~]{1,3}([^*_~]+)[*_~]{1,3}/g, \"$1\")\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/[ \\t\\f\\v]+/g, \" \")\n    .replace(/^[ \\t]+|[ \\t]+$/gm, \"\")\n    .replace(/\\n{3,}/g, \"\\n\\n\")\n    .trim()\n}\n\nfunction truncateSnippet(input: string, maxLength: number) {\n  if (input.length <= maxLength) return input\n  return `${input.slice(0, maxLength).trimEnd()}\u2026`\n}\n\nfunction linkifyIssueReferences(snippet: string, repo: string | null): React.ReactNode[] {\n  const regex = /#(\\d+)/g\n  const nodes: React.ReactNode[] = []\n  let lastIndex = 0\n\n  for (const match of snippet.matchAll(regex)) {\n    const ref = match[0]\n    const number = match[1]\n    const index = match.index ?? 0\n    if (index > lastIndex) nodes.push(snippet.slice(lastIndex, index))\n    if (repo) {\n      nodes.push(\n        <Link\n          key={`${repo}-${number}-${index}`}\n          href={`https://github.com/${repo}/pull/${number}`}\n          className=\"text-[#58a6ff] hover:underline\"\n        >\n          {ref}\n        </Link>\n      )\n    } else {\n      nodes.push(ref)\n    }\n    lastIndex = index + ref.length\n  }\n\n  if (lastIndex < snippet.length) nodes.push(snippet.slice(lastIndex))\n\n  return nodes\n}\n\nfunction getBranchUrl(owner: string | null, branch: string | null) {\n  if (!owner || !branch) return null\n  return `https://github.com/${owner}/tree/${branch}`\n}\n\nfunction getRepoBranchLabel(repo: string | null, ref: string | null) {\n  if (!repo || !ref) return null\n  return `${repo}:${ref}`\n}\n\nfunction formatRepoBranchLabel(repo: string | null, ref: string | null) {\n  if (!repo || !ref) return null\n  const repoName = repo.split(\"/\")[1] ?? repo\n  return `${repoName}:${ref}`\n}\n\nfunction getPullStatusMeta(status: \"merged\" | \"draft\" | \"open\" | \"closed\") {\n  const base = \"inline-flex items-center gap-1 rounded-full text-white\"\n  const iconClass = \"size-4 align-text-bottom\"\n  if (status === \"merged\")\n    return {\n      label: \"Merged\",\n      className: `${base}`,\n      icon: <GitMerge className={iconClass} style={{ color: \"#8250df\" }} />,\n    }\n  if (status === \"draft\")\n    return {\n      label: \"Draft\",\n      className: `${base}`,\n      icon: <GitPullRequest className={iconClass} style={{ color: \"#6e7781\" }} />,\n    }\n  if (status === \"open\")\n    return {\n      label: \"Open\",\n      className: `${base}`,\n      icon: <GitPullRequest className={iconClass} style={{ color: \"#1f883d\" }} />,\n    }\n  return {\n    label: \"Closed\",\n    className: `${base}`,\n    icon: <GitPullRequest className={iconClass} style={{ color: \"#cf222e\" }} />,\n  }\n}\n\nfunction repoFromUrl(htmlUrl: string): string {\n  try {\n    const u = new URL(htmlUrl)\n    const p = u.pathname.split(\"/\").filter(Boolean)\n    if (p.length >= 2) return `${p[0]}/${p[1]}`\n    return htmlUrl\n  } catch {\n    return htmlUrl\n  }\n}\n\nfunction formatOnDate(input?: string | null) {\n  if (!input) return null\n  const date = new Date(input)\n  if (Number.isNaN(date.getTime())) return null\n  const now = new Date()\n  const options: Intl.DateTimeFormatOptions = { month: \"short\", day: \"numeric\" }\n  if (date.getFullYear() !== now.getFullYear()) options.year = \"numeric\"\n  return `on ${date.toLocaleDateString(undefined, options)}`\n}\n"
    }
  ]
}
