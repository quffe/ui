{
  "name": "github-replica",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@ui-components/replica",
  "description": "Compact metadata card for GitHub resources (PRs, Issues, Users, Repos)",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "badge",
    "avatar",
    "tooltip",
    "separator",
    "skeleton",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/GithubReplica.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useEffect } from \"react\"\nimport Link from \"next/link\"\n\nimport { useGithubReplica } from \"@/hooks/use-github-replica\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport type { GithubResource } from \"@/lib/github/types\"\nimport { cn } from \"@/lib/utils\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  GitPullRequest,\n  GitMerge,\n  GitFork,\n  MapPin,\n  MessageSquare,\n  Star,\n  Users,\n  UserPlus,\n  CircleDot,\n  CircleCheck,\n} from \"lucide-react\"\n\ntype GithubReplicaProps = {\n  url: string\n  useServer?: boolean\n  className?: string\n  linkProps?: React.ComponentProps<\"a\">\n  onError?: (error: Error) => void\n}\n\nexport function GithubReplica({ url, useServer, className, linkProps, onError }: GithubReplicaProps) {\n  const { data, isLoading, error, refetch } = useGithubReplica(url, { useServer })\n\n  useEffect(() => {\n    if (error) onError?.(error)\n  }, [error, onError])\n\n  if (isLoading) return <GithubReplicaSkeleton className={className} />\n  if (error || !data)\n    return <GithubReplicaError url={url} onRetry={refetch} className={className} error={error ?? undefined} />\n\n  const content = renderContent(data, linkProps)\n  const tooltip = renderTooltipContent(data)\n\n  if (!tooltip) return <div className={className}>{content}</div>\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <div className={className}>{content}</div>\n      </TooltipTrigger>\n      <TooltipContent\n        sideOffset={12}\n        align=\"start\"\n        className=\"max-w-sm border border-border bg-popover p-2.5 text-popover-foreground shadow-lg\"\n      >\n        {tooltip}\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nfunction GithubReplicaSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={`inline-flex items-baseline gap-2 ${className ?? \"\"}`} aria-busy=\"true\">\n      <Skeleton className=\"h-4 w-4 rounded-full\" />\n      <div className=\"flex items-baseline gap-2\">\n        <Skeleton className=\"h-4 w-48\" />\n        <Skeleton className=\"h-4 w-28\" />\n      </div>\n    </div>\n  )\n}\n\nfunction GithubReplicaError({ url, onRetry, className, error }: { url: string; onRetry: () => void; className?: string; error?: Error }) {\n  const parsed = parseGithubUrl(url)\n  const anyErr = error as unknown as { statusCode?: number; code?: string; message?: string } | undefined\n  return (\n    <div className={`inline-flex items-center gap-2 ${className ?? \"\"}`}> \n      <span className=\"text-xs text-muted-foreground\">Could not load</span>\n      <span className=\"text-xs truncate max-w-[24rem] text-muted-foreground\">{parsed.kind !== \"unknown\" ? url : \"Invalid GitHub URL\"}</span>\n      <Button size=\"sm\" variant=\"outline\" onClick={onRetry} aria-label=\"Retry loading GitHub data\" title={anyErr?.message}>\n        Retry\n      </Button>\n      {error ? (\n        <span className=\"text-[11px] text-muted-foreground\">\n          {anyErr?.statusCode ? `HTTP ${anyErr.statusCode}` : null}\n          {anyErr?.code ? ` (${anyErr.code})` : null}\n          {anyErr?.statusCode || anyErr?.code ? \": \" : null}\n          {error.message}\n          {anyErr?.code === \"RATE_LIMITED\" ? \" \u2013 add GITHUB_TOKEN and/or useServer for higher limits\" : null}\n        </span>\n      ) : null}\n    </div>\n  )\n}\n\nfunction renderContent(data: GithubResource, linkProps?: React.ComponentProps<\"a\">) {\n  switch (data.kind) {\n    case \"pull\":\n      return <PullContent data={data} linkProps={linkProps} />\n    case \"issue\":\n      return <IssueContent data={data} linkProps={linkProps} />\n    case \"user\":\n      return <UserContent data={data} linkProps={linkProps} />\n    case \"repo\":\n      return <RepoContent data={data} linkProps={linkProps} />\n    default:\n      return <p className=\"text-sm\">Unsupported GitHub URL</p>\n  }\n}\n\nfunction renderTooltipContent(data: GithubResource): React.ReactNode {\n  switch (data.kind) {\n    case \"pull\":\n      return <PullTooltip data={data} />\n    case \"issue\":\n      return <IssueTooltip data={data} />\n    case \"user\":\n      return <UserTooltip data={data} />\n    case \"repo\":\n      return <RepoTooltip data={data} />\n    default:\n      return null\n  }\n}\n\ntype MinimalUser = {\n  id?: number\n  login: string\n  html_url: string\n  avatar_url?: string | null\n  name?: string | null\n  bio?: string | null\n  followers?: number\n  following?: number\n  location?: string | null\n}\n\nfunction toUserResource(user: MinimalUser): Extract<GithubResource, { kind: \"user\" }> {\n  return {\n    kind: \"user\",\n    id: user.id ?? 0,\n    login: user.login,\n    name: user.name ?? null,\n    avatar_url: user.avatar_url ?? null,\n    html_url: user.html_url,\n    bio: user.bio ?? null,\n    followers: user.followers,\n    following: user.following,\n    location: user.location ?? null,\n  }\n}\n\nfunction UserHoverLink({\n  user,\n  className,\n  ariaLabel,\n  children,\n  disableTooltip,\n}: {\n  user: MinimalUser\n  className?: string\n  ariaLabel?: string\n  children?: React.ReactNode\n  disableTooltip?: boolean\n}) {\n  const label = ariaLabel ?? `Open ${user.login} on GitHub`\n  const content = children ?? user.login\n\n  if (disableTooltip)\n    return (\n      <Link href={user.html_url} className={className} aria-label={label}>\n        {content}\n      </Link>\n    )\n\n  const resource = toUserResource(user)\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Link href={user.html_url} className={className} aria-label={label}>\n          {content}\n        </Link>\n      </TooltipTrigger>\n      <TooltipContent\n        sideOffset={8}\n        align=\"start\"\n        className=\"max-w-sm border border-border bg-popover p-2.5 text-popover-foreground shadow-lg\"\n      >\n        <UserTooltip data={resource} />\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n\nfunction PullContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"pull\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const status = data.merged ? \"merged\" : data.draft ? \"draft\" : data.state\n  const meta = getStatusMeta(\"pull\", status)\n  const repo = data.base?.repo?.full_name ?? repoFromUrl(data.html_url)\n  const aria = `Open PR #${data.number} in ${repo}`\n\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {meta.icon}\n      </span>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\"> {repo}#{data.number}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction IssueContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"issue\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const status = data.state\n  const meta = getStatusMeta(\"issue\", status)\n  const repo = repoFromUrl(data.html_url)\n  const aria = `Open issue #${data.number} in ${repo}`\n\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <span className=\"inline-flex items-center\" aria-hidden>\n        {meta.icon}\n      </span>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.title}</bdi>\n        <span className=\"text-muted-foreground\"> {repo}#{data.number}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction UserContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"user\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const aria = `Open GitHub profile for ${data.login}`\n  return (\n    <div className=\"inline-flex items-baseline gap-2\">\n      <Avatar className=\"size-4\">\n        <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n        <AvatarFallback aria-hidden>{data.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n      </Avatar>\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.name ?? data.login}</bdi>\n        <span className=\"text-muted-foreground\"> @{data.login}</span>\n      </Link>\n    </div>\n  )\n}\n\nfunction RepoContent({ data, linkProps }: { data: Extract<GithubResource, { kind: \"repo\" }>; linkProps?: React.ComponentProps<\"a\"> }) {\n  const aria = `Open repository ${data.full_name}`\n  const ownerUser = data.owner\n    ? {\n        id: data.owner.id,\n        login: data.owner.login,\n        html_url: data.owner.html_url,\n        avatar_url: data.owner.avatar_url,\n      }\n    : null\n\n  return (\n    <div className=\"inline-flex items-center gap-2\">\n      {ownerUser ? (\n        <UserHoverLink\n          user={ownerUser}\n          ariaLabel={`Open GitHub profile for ${ownerUser.login}`}\n          className=\"inline-flex\"\n        >\n          <Avatar className=\"size-4\">\n            <AvatarImage src={ownerUser.avatar_url ?? undefined} alt={`${ownerUser.login} avatar`} />\n            <AvatarFallback aria-hidden>{ownerUser.login.slice(0, 2).toUpperCase()}</AvatarFallback>\n          </Avatar>\n        </UserHoverLink>\n      ) : null}\n      <Link href={data.html_url} className=\"hover:underline text-sm\" aria-label={aria} {...linkProps}>\n        <bdi className=\"font-medium\">{data.full_name}</bdi>\n      </Link>\n    </div>\n  )\n}\n\nfunction PullTooltip({ data }: { data: Extract<GithubResource, { kind: \"pull\" }> }) {\n  const repo = data.base?.repo?.full_name ?? repoFromUrl(data.html_url)\n  const status = data.merged ? \"merged\" : data.draft ? \"draft\" : data.state\n  const statusMeta = getStatusMeta(\"pull\", status)\n  const created = formatDate(data.created_at)\n  const labels = (data.labels ?? []).slice(0, 3)\n  const extraLabels = (data.labels?.length ?? 0) - labels.length\n\n  return (\n    <div className=\"flex min-w-[260px] max-w-sm flex-col gap-1.5 text-sm\">\n      <div className=\"space-y-0.5\">\n        <p className=\"text-[11px] font-medium uppercase tracking-wide text-muted-foreground\">Pull request</p>\n        <Link href={data.html_url} className=\"font-semibold text-foreground leading-snug hover:underline\">\n          {data.title}\n        </Link>\n        <p className=\"text-xs text-muted-foreground\">\n          {repo} \u00b7 #{data.number}\n        </p>\n      </div>\n      <div className=\"flex flex-wrap items-center gap-1.5 text-xs text-muted-foreground\">\n        <span className=\"inline-flex items-center gap-1 font-medium text-foreground\">\n          <span aria-hidden>{statusMeta.icon}</span>\n          {statusMeta.label}\n        </span>\n        <span>Opened {created}</span>\n        <span className=\"inline-flex items-center gap-0.5\">\n          <span>by</span>\n          <UserHoverLink\n            user={{\n              id: data.user.id,\n              login: data.user.login,\n              html_url: data.user.html_url,\n              avatar_url: data.user.avatar_url,\n            }}\n            className=\"font-medium text-foreground hover:underline\"\n            disableTooltip\n          />\n        </span>\n      </div>\n      {labels.length > 0 ? (\n        <div className=\"flex flex-wrap gap-1.5\">\n          {labels.map(label => (\n            <Badge\n              key={label.id}\n              variant=\"outline\"\n              style={label.color ? { borderColor: `#${label.color}`, color: `#${label.color}` } : undefined}\n              className={cn(\"border-muted-foreground/30 bg-transparent text-[10px]\", label.color ? \"\" : \"text-muted-foreground\")}\n            >\n              {label.name}\n            </Badge>\n          ))}\n          {extraLabels > 0 ? (\n            <Badge variant=\"outline\" className=\"border-muted-foreground/30 bg-transparent text-[10px] text-muted-foreground\">\n              +{extraLabels} more\n            </Badge>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nfunction IssueTooltip({ data }: { data: Extract<GithubResource, { kind: \"issue\" }> }) {\n  const repo = repoFromUrl(data.html_url)\n  const statusMeta = getStatusMeta(\"issue\", data.state)\n  const created = formatDate(data.created_at)\n  const labels = (data.labels ?? []).slice(0, 3)\n  const extraLabels = (data.labels?.length ?? 0) - labels.length\n\n  return (\n    <div className=\"flex min-w-[240px] max-w-sm flex-col gap-1.5 text-sm\">\n      <div className=\"space-y-0.5\">\n        <p className=\"text-[11px] font-medium uppercase tracking-wide text-muted-foreground\">Issue</p>\n        <Link href={data.html_url} className=\"font-semibold text-foreground leading-snug hover:underline\">\n          {data.title}\n        </Link>\n        <p className=\"text-xs text-muted-foreground\">\n          {repo} \u00b7 #{data.number}\n        </p>\n      </div>\n      <div className=\"flex flex-wrap items-center gap-1.5 text-xs text-muted-foreground\">\n        <span className=\"inline-flex items-center gap-1 font-medium text-foreground\">\n          <span aria-hidden>{statusMeta.icon}</span>\n          {statusMeta.label}\n        </span>\n        <span>Opened {created}</span>\n        <span className=\"inline-flex items-center gap-0.5\">\n          <span>by</span>\n          <UserHoverLink\n            user={{\n              id: data.user.id,\n              login: data.user.login,\n              html_url: data.user.html_url,\n              avatar_url: data.user.avatar_url,\n            }}\n            className=\"font-medium text-foreground hover:underline\"\n            disableTooltip\n          />\n        </span>\n        <span>{data.comments ?? 0} comments</span>\n      </div>\n      {labels.length > 0 ? (\n        <div className=\"flex flex-wrap gap-1.5\">\n          {labels.map(label => (\n            <Badge\n              key={label.id}\n              variant=\"outline\"\n              style={label.color ? { borderColor: `#${label.color}`, color: `#${label.color}` } : undefined}\n              className={cn(\"border-muted-foreground/30 bg-transparent text-[10px]\", label.color ? \"\" : \"text-muted-foreground\")}\n            >\n              {label.name}\n            </Badge>\n          ))}\n          {extraLabels > 0 ? (\n            <Badge variant=\"outline\" className=\"border-muted-foreground/30 bg-transparent text-[10px] text-muted-foreground\">\n              +{extraLabels} more\n            </Badge>\n          ) : null}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nfunction UserTooltip({ data }: { data: Extract<GithubResource, { kind: \"user\" }> }) {\n  return (\n    <div className=\"flex min-w-[220px] max-w-xs flex-col gap-1.5 text-sm\">\n      <div className=\"flex items-center gap-2.5\">\n        <Avatar className=\"size-10\">\n          <AvatarImage src={data.avatar_url ?? undefined} alt={`${data.login} avatar`} />\n          <AvatarFallback aria-hidden>{data.login?.slice(0, 2).toUpperCase()}</AvatarFallback>\n        </Avatar>\n        <div className=\"space-y-0.5\">\n          <Link href={data.html_url} className=\"text-sm font-semibold text-foreground leading-snug hover:underline\">\n            {data.login}\n          </Link>\n          {data.name ? <p className=\"text-xs text-muted-foreground\">{data.name}</p> : null}\n        </div>\n      </div>\n      {data.bio ? <p className=\"text-sm leading-snug text-muted-foreground\">{data.bio}</p> : null}\n      <div className=\"flex flex-wrap items-center gap-1.5 text-xs text-muted-foreground\">\n        {typeof data.followers === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <Users className=\"size-3\" />\n            {formatNumber(data.followers)} followers\n          </span>\n        ) : null}\n        {typeof data.following === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <UserPlus className=\"size-3\" />\n            {formatNumber(data.following)} following\n          </span>\n        ) : null}\n        {data.location ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <MapPin className=\"size-3\" />\n            {data.location}\n          </span>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nfunction RepoTooltip({ data }: { data: Extract<GithubResource, { kind: \"repo\" }> }) {\n  const ownerUser = data.owner\n    ? {\n        id: data.owner.id,\n        login: data.owner.login,\n        html_url: data.owner.html_url,\n        avatar_url: data.owner.avatar_url,\n      }\n    : null\n\n  return (\n    <div className=\"flex min-w-[220px] max-w-sm flex-col gap-1.5 text-sm\">\n      <div className=\"flex items-center gap-2.5\">\n        {ownerUser ? (\n          <UserHoverLink\n            user={ownerUser}\n            ariaLabel={`Open GitHub profile for ${ownerUser.login}`}\n            className=\"inline-flex\"\n            disableTooltip\n          >\n            <Avatar className=\"size-8\">\n              <AvatarImage src={ownerUser.avatar_url ?? undefined} alt={`${ownerUser.login} avatar`} />\n              <AvatarFallback aria-hidden>{ownerUser.login.slice(0, 2).toUpperCase()}</AvatarFallback>\n            </Avatar>\n          </UserHoverLink>\n        ) : null}\n        <div className=\"space-y-0.5\">\n          <p className=\"text-[11px] font-medium uppercase tracking-wide text-muted-foreground\">Repository</p>\n          <Link href={data.html_url} className=\"font-semibold text-foreground leading-snug hover:underline\">\n            {data.full_name}\n          </Link>\n          {ownerUser ? (\n            <UserHoverLink\n              user={ownerUser}\n              className=\"text-xs text-muted-foreground hover:underline\"\n              disableTooltip\n            >\n              @{ownerUser.login}\n            </UserHoverLink>\n          ) : null}\n        </div>\n      </div>\n      {data.description ? <p className=\"text-sm leading-snug text-muted-foreground\">{data.description}</p> : null}\n      <div className=\"flex flex-wrap items-center gap-2 text-xs text-muted-foreground\">\n        {typeof data.stargazers_count === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <Star className=\"size-3\" />\n            {formatNumber(data.stargazers_count)} stars\n          </span>\n        ) : null}\n        {typeof data.forks_count === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <GitFork className=\"size-3\" />\n            {formatNumber(data.forks_count)} forks\n          </span>\n        ) : null}\n        {typeof data.open_issues_count === \"number\" ? (\n          <span className=\"inline-flex items-center gap-1\">\n            <MessageSquare className=\"size-3\" />\n            {formatNumber(data.open_issues_count)} open issues\n          </span>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nfunction getStatusMeta(kind: \"pull\" | \"issue\", status: string) {\n  const base = \"inline-flex items-center gap-1 rounded-full text-white\"\n  const iconClass = \"size-4 align-text-bottom\"\n  if (kind === \"pull\") {\n    if (status === \"merged\") return { label: \"Merged\", className: `${base}`, icon: <GitMerge className={iconClass} style={{ color: \"#8250df\" }} /> }\n    if (status === \"draft\") return { label: \"Draft\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#6e7781\" }} /> }\n    if (status === \"open\") return { label: \"Open\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#1f883d\" }} /> }\n    return { label: \"Closed\", className: `${base}`, icon: <GitPullRequest className={iconClass} style={{ color: \"#cf222e\" }} /> }\n  }\n  // issue\n  if (status === \"open\")\n    return { label: \"Open\", className: `${base}`, icon: <CircleDot className={iconClass} style={{ color: \"#1f883d\" }} /> }\n  return { label: \"Closed\", className: `${base}`, icon: <CircleCheck className={iconClass} style={{ color: \"#8250df\" }} /> }\n}\n\nfunction repoFromUrl(htmlUrl: string): string {\n  try {\n    const u = new URL(htmlUrl)\n    const p = u.pathname.split(\"/\").filter(Boolean)\n    if (p.length >= 2) return `${p[0]}/${p[1]}`\n    return htmlUrl\n  } catch {\n    return htmlUrl\n  }\n}\n\nfunction formatDate(input: string) {\n  try {\n    return new Date(input).toLocaleDateString(undefined, { year: \"numeric\", month: \"short\", day: \"numeric\" })\n  } catch {\n    return input\n  }\n}\n\nfunction formatNumber(value: number) {\n  return new Intl.NumberFormat(undefined, { notation: value >= 1000 ? \"compact\" : \"standard\", maximumFractionDigits: 1 }).format(value)\n}\n\nexport default GithubReplica\n"
    }
  ]
}
