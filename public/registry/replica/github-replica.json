{
  "name": "github-replica",
  "type": "registry:component",
  "category": "Replica",
  "namespace": "@quffeui/replica",
  "description": "Compact metadata card for GitHub resources (PRs, Issues, Users, Repos)",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "badge",
    "avatar",
    "tooltip",
    "separator",
    "skeleton",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "Replica/Github/GithubReplica.tsx",
      "content": "\"use client\"\n\nimport { useEffect, type ComponentProps } from \"react\"\n\nimport { useGithubReplica } from \"@/hooks/use-github-replica\"\nimport { parseGithubUrl } from \"@/lib/github/parse-url\"\nimport { Button } from \"@/components/ui/button\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nimport { GithubReplicaDisplay } from \"./GithubReplicaDisplay\"\n\ntype GithubReplicaProps = {\n  url: string\n  useServer?: boolean\n  className?: string\n  linkProps?: ComponentProps<\"a\">\n  onError?: (error: Error) => void\n}\n\nexport function GithubReplica({\n  url,\n  useServer,\n  className,\n  linkProps,\n  onError,\n}: GithubReplicaProps) {\n  const { data, isLoading, error, refetch } = useGithubReplica(url, { useServer })\n\n  useEffect(() => {\n    if (error) onError?.(error)\n  }, [error, onError])\n\n  if (isLoading) return <GithubReplicaSkeleton className={className} />\n  if (error || !data)\n    return (\n      <GithubReplicaError\n        url={url}\n        onRetry={refetch}\n        className={className}\n        error={error ?? undefined}\n      />\n    )\n\n  return <GithubReplicaDisplay resource={data} className={className} linkProps={linkProps} />\n}\n\nfunction GithubReplicaSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={`inline-flex items-baseline gap-2 ${className ?? \"\"}`} aria-busy=\"true\">\n      <Skeleton className=\"h-4 w-4 rounded-full\" />\n      <div className=\"flex items-baseline gap-2\">\n        <Skeleton className=\"h-4 w-48\" />\n        <Skeleton className=\"h-4 w-28\" />\n      </div>\n    </div>\n  )\n}\n\nfunction GithubReplicaError({\n  url,\n  onRetry,\n  className,\n  error,\n}: {\n  url: string\n  onRetry: () => void\n  className?: string\n  error?: Error\n}) {\n  const parsed = parseGithubUrl(url)\n  const anyErr = error as unknown as\n    | { statusCode?: number; code?: string; message?: string }\n    | undefined\n  return (\n    <div className={`inline-flex items-center gap-2 ${className ?? \"\"}`}>\n      <span className=\"text-xs text-muted-foreground\">Could not load</span>\n      <span className=\"text-xs truncate max-w-[24rem] text-muted-foreground\">\n        {parsed.kind !== \"unknown\" ? url : \"Invalid GitHub URL\"}\n      </span>\n      <Button\n        size=\"sm\"\n        variant=\"outline\"\n        onClick={onRetry}\n        aria-label=\"Retry loading GitHub data\"\n        title={anyErr?.message}\n      >\n        Retry\n      </Button>\n      {error ? (\n        <span className=\"text-[11px] text-muted-foreground\">\n          {anyErr?.statusCode ? `HTTP ${anyErr.statusCode}` : null}\n          {anyErr?.code ? ` (${anyErr.code})` : null}\n          {anyErr?.statusCode || anyErr?.code ? \": \" : null}\n          {error.message}\n          {anyErr?.code === \"RATE_LIMITED\"\n            ? \" â€“ add GITHUB_TOKEN and/or useServer for higher limits\"\n            : null}\n        </span>\n      ) : null}\n    </div>\n  )\n}\n\nexport default GithubReplica\n"
    }
  ]
}